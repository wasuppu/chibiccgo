make test ARCH=x64
make[1]: Entering directory '/home/corco/github.com/daily/cike/chibicc/c197'
go build -o chibicc *.go
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/alignof.o test/alignof.c
gcc  -o test/x64/alignof.exe test/x64/alignof.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/arith.o test/arith.c
gcc  -o test/x64/arith.exe test/x64/arith.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/cast.o test/cast.c
gcc  -o test/x64/cast.exe test/x64/cast.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/compat.o test/compat.c
gcc  -o test/x64/compat.exe test/x64/compat.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/complit.o test/complit.c
gcc  -o test/x64/complit.exe test/x64/complit.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/const.o test/const.c
gcc  -o test/x64/const.exe test/x64/const.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/constexpr.o test/constexpr.c
gcc  -o test/x64/constexpr.exe test/x64/constexpr.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/control.o test/control.c
gcc  -o test/x64/control.exe test/x64/control.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/decl.o test/decl.c
gcc  -o test/x64/decl.exe test/x64/decl.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/enum.o test/enum.c
gcc  -o test/x64/enum.exe test/x64/enum.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/extern.o test/extern.c
gcc  -o test/x64/extern.exe test/x64/extern.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/float.o test/float.c
gcc  -o test/x64/float.exe test/x64/float.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/function.o test/function.c
gcc  -o test/x64/function.exe test/x64/function.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/initializer.o test/initializer.c
gcc  -o test/x64/initializer.exe test/x64/initializer.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/literal.o test/literal.c
gcc  -o test/x64/literal.exe test/x64/literal.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/macro.o test/macro.c
gcc  -o test/x64/macro.exe test/x64/macro.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/pointer.o test/pointer.c
gcc  -o test/x64/pointer.exe test/x64/pointer.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/sizeof.o test/sizeof.c
gcc  -o test/x64/sizeof.exe test/x64/sizeof.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/stdhdr.o test/stdhdr.c
gcc  -o test/x64/stdhdr.exe test/x64/stdhdr.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/string.o test/string.c
gcc  -o test/x64/string.exe test/x64/string.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/struct.o test/struct.c
gcc  -o test/x64/struct.exe test/x64/struct.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/typedef.o test/typedef.c
gcc  -o test/x64/typedef.exe test/x64/typedef.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/union.o test/union.c
gcc  -o test/x64/union.exe test/x64/union.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/usualconv.o test/usualconv.c
gcc  -o test/x64/usualconv.exe test/x64/usualconv.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/varargs.o test/varargs.c
gcc  -o test/x64/varargs.exe test/x64/varargs.o -xc test/common
mkdir -p test/x64
./chibicc -march=x64 -Iinclude -Itest -c -o test/x64/variable.o test/variable.c
gcc  -o test/x64/variable.exe test/x64/variable.o -xc test/common
for i in test/x64/alignof.exe test/x64/arith.exe test/x64/cast.exe test/x64/compat.exe test/x64/complit.exe test/x64/const.exe test/x64/constexpr.exe test/x64/control.exe test/x64/decl.exe test/x64/enum.exe test/x64/extern.exe test/x64/float.exe test/x64/function.exe test/x64/initializer.exe test/x64/literal.exe test/x64/macro.exe test/x64/pointer.exe test/x64/sizeof.exe test/x64/stdhdr.exe test/x64/string.exe test/x64/struct.exe test/x64/typedef.exe test/x64/union.exe test/x64/usualconv.exe test/x64/varargs.exe test/x64/variable.exe; do echo $i;  ./$i || exit 1; echo; done
test/x64/alignof.exe
_Alignof(char) => 1
_Alignof(short) => 2
_Alignof(int) => 4
_Alignof(long) => 8
_Alignof(long long) => 8
_Alignof(char[3]) => 1
_Alignof(int[3]) => 4
_Alignof(struct {char a; char b;}[2]) => 1
_Alignof(struct {char a; long b;}[2]) => 8
({ _Alignas(char) char x, y; &y-&x; }) => 1
({ _Alignas(long) char x, y; &y-&x; }) => 8
({ _Alignas(32) char x, y; &y-&x; }) => 32
({ _Alignas(32) int *x, *y; ((char *)&y)-((char *)&x); }) => 32
({ struct { _Alignas(16) char x, y; } a; &a.y-&a.x; }) => 16
({ struct T { _Alignas(8) char a; }; _Alignof(struct T); }) => 8
(long)(char *)&g1 % 512 => 0
(long)(char *)&g2 % 512 => 0
(long)(char *)&g4 % 4 => 0
(long)(char *)&g5 % 8 => 0
({ char x; _Alignof(x); }) => 1
({ int x; _Alignof(x); }) => 4
({ char x; _Alignof x; }) => 1
({ int x; _Alignof x; }) => 4
_Alignof(char) << 31 >> 31 => 1
_Alignof(char) << 63 >> 63 => 1
({ char x; _Alignof(x) << 63 >> 63; }) => 1
OK

test/x64/arith.exe
0 => 0
42 => 42
5+20-4 => 21
12 + 34 - 5 => 41
5+6*7 => 47
5*(9-6) => 15
(3+5)/2 => 4
-10+20 => 10
- -10 => 10
- - +10 => 10
0==1 => 0
42==42 => 1
0!=1 => 1
42!=42 => 0
0<1 => 1
1<1 => 0
2<1 => 0
0<=1 => 1
1<=1 => 1
2<=1 => 0
1>0 => 1
1>1 => 0
1>2 => 0
1>=0 => 1
1>=1 => 1
1>=2 => 0
1073741824 * 100 / 100 => 0
({ int i=2; i+=5; i; }) => 7
({ int i=2; i+=5; }) => 7
({ int i=5; i-=2; i; }) => 3
({ int i=5; i-=2; }) => 3
({ int i=3; i*=2; i; }) => 6
({ int i=3; i*=2; }) => 6
({ int i=6; i/=2; i; }) => 3
({ int i=6; i/=2; }) => 3
({ int i=2; ++i; }) => 3
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; ++*p; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; --*p; }) => 0
({ int i=2; i++; }) => 2
({ int i=2; i--; }) => 2
({ int i=2; i++; i; }) => 3
({ int i=2; i--; i; }) => 1
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p++; }) => 1
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p--; }) => 1
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[0]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*(p--))--; a[1]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p)--; a[2]; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p)--; p++; *p; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[0]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[1]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[2]; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; *p; }) => 2
!1 => 0
!2 => 0
!0 => 1
!(char)0 => 1
!(long)3 => 0
sizeof(!(char)0) => 4
sizeof(!(long)0) => 4
~0 => -1
~-1 => 0
17%6 => 5
((long)17)%6 => 5
({ int i=10; i%=4; i; }) => 2
({ long i=10; i%=4; i; }) => 2
0&1 => 0
3&1 => 1
7&3 => 3
-1&10 => 10
0|1 => 1
0b10000|0b00011 => 19
0^0 => 0
0b1111^0b1111 => 0
0b111000^0b001100 => 52
({ int i=6; i&=3; i; }) => 2
({ int i=6; i|=3; i; }) => 7
({ int i=15; i^=5; i; }) => 10
0?1:2 => 2
1?1:2 => 1
0?-2:-1 => -1
1?-2:-1 => -2
sizeof(0?1:2) => 4
sizeof(0?(long)1:(long)2) => 8
0?(long)-2:-1 => -1
0?-2:(long)-1 => -1
1?(long)-2:-1 => -2
1?-2:(long)-1 => -2
({ int x; int *p=&x; p+20-p; }) => 20
({ int x; int *p=&x; p+20-p>0; }) => 1
({ int x; int *p=&x; p-20-p; }) => -20
({ int x; int *p=&x; p-20-p<0; }) => 1
(char *)0xffffffffffffffff - (char *)0xfffffffffffffff0 => 15
(char *)0xfffffffffffffff0 - (char *)0xffffffffffffffff => -15
(void *)0xffffffffffffffff > (void *)0 => 1
OK

test/x64/cast.exe
(int)8590066177 => 131585
(short)8590066177 => 513
(char)8590066177 => 1
(long)1 => 1
(long)&*(int *)0 => 0
({ int x=512; *(char *)&x=1; x; }) => 513
({ int x=5; long y=(long)&x; *(int*)y; }) => 5
(char)255 => -1
(signed char)255 => -1
(unsigned char)255 => 255
(short)65535 => -1
(unsigned short)65535 => 65535
(int)0xffffffff => -1
(unsigned)0xffffffff => -1
-1<1 => 1
-1<(unsigned)1 => 0
(char)127+(char)127 => 254
(short)32767+(short)32767 => 65534
-1>>1 => -1
(unsigned long)-1 => -1
((unsigned)-1)>>1 => 2147483647
(-100)/2 => -50
((unsigned)-100)/2 => 2147483598
((unsigned long)-100)/2 => -50
((long)-1)/(unsigned)100 => 0
(-100)%7 => -2
((unsigned)-100)%7 => 2
((unsigned long)-100)%9 => 6
(int)(unsigned short)65535 => 65535
({ unsigned short x = 65535; x; }) => 65535
({ unsigned short x = 65535; (int)x; }) => 65535
({ typedef short T; T x = 65535; (int)x; }) => -1
({ typedef unsigned short T; T x = 65535; (int)x; }) => 65535
(_Bool)0.0 => 0
(_Bool)0.1 => 1
(char)3.0 => 3
(short)1000.3 => 1000
(int)3.99 => 3
(long)2e15 => 1233977344
(float)3.5 => 3
(double)(float)5.5 => 5
(float)3 => 3
(double)3 => 3
(float)3L => 3
(double)3L => 3
OK

test/x64/compat.exe
OK

test/x64/complit.exe
(int){1} => 1
((int[]){0,1,2})[2] => 2
((struct {char a; int b;}){'a', 3}).a => 97
({ int x=3; (int){x}; }) => 3
tree->val => 1
tree->lhs->val => 2
tree->lhs->lhs->val => 3
tree->lhs->rhs->val => 4
OK

test/x64/const.exe
({ const x = 5; x; }) => 5
({ const x = 8; int *const y=&x; *y; }) => 8
({ const x = 6; *(const * const)&x; }) => 6
OK

test/x64/constexpr.exe
({ enum { ten=1+2+3+4 }; ten; }) => 10
({ int i=0; switch(3) { case 5-2+0*3: i++; } i; }) => 1
({ int x[1+1]; sizeof(x); }) => 8
({ char x[8-2]; sizeof(x); }) => 6
({ char x[2*3]; sizeof(x); }) => 6
({ char x[12/4]; sizeof(x); }) => 3
({ char x[12%10]; sizeof(x); }) => 2
({ char x[0b110&0b101]; sizeof(x); }) => 4
({ char x[0b110|0b101]; sizeof(x); }) => 7
({ char x[0b111^0b001]; sizeof(x); }) => 6
({ char x[1<<2]; sizeof(x); }) => 4
({ char x[4>>1]; sizeof(x); }) => 2
({ char x[(1==1)+1]; sizeof(x); }) => 2
({ char x[(1!=1)+1]; sizeof(x); }) => 1
({ char x[(1<1)+1]; sizeof(x); }) => 1
({ char x[(1<=1)+1]; sizeof(x); }) => 2
({ char x[1?2:3]; sizeof(x); }) => 2
({ char x[0?2:3]; sizeof(x); }) => 3
({ char x[(1,3)]; sizeof(x); }) => 3
({ char x[!0+1]; sizeof(x); }) => 2
({ char x[!1+1]; sizeof(x); }) => 1
({ char x[~-3]; sizeof(x); }) => 2
({ char x[(5||6)+1]; sizeof(x); }) => 2
({ char x[(0||0)+1]; sizeof(x); }) => 1
({ char x[(1&&1)+1]; sizeof(x); }) => 2
({ char x[(1&&0)+1]; sizeof(x); }) => 1
({ char x[(int)3]; sizeof(x); }) => 3
({ char x[(char)0xffffff0f]; sizeof(x); }) => 15
({ char x[(short)0xffff010f]; sizeof(x); }) => 271
({ char x[(int)0xfffffffffff+5]; sizeof(x); }) => 4
({ char x[(int*)0+2]; sizeof(x); }) => 8
({ char x[(int*)16-1]; sizeof(x); }) => 12
({ char x[(int*)16-(int*)4]; sizeof(x); }) => 3
({ char x[(-1>>31)+5]; sizeof(x); }) => 4
({ char x[(unsigned char)0xffffffff]; sizeof(x); }) => 255
({ char x[(unsigned short)0xffff800f]; sizeof(x); }) => 32783
({ char x[(unsigned int)0xfffffffffff>>31]; sizeof(x); }) => 1
({ char x[(long)-1/((long)1<<62)+1]; sizeof(x); }) => 1
({ char x[(unsigned long)-1/((long)1<<62)+1]; sizeof(x); }) => 4
({ char x[(unsigned)1<-1]; sizeof(x); }) => 1
({ char x[(unsigned)1<=-1]; sizeof(x); }) => 1
g40==1.5 => 1
g41==11 => 1
OK

test/x64/control.exe
({ int x; if (0) x=2; else x=3; x; }) => 3
({ int x; if (1-1) x=2; else x=3; x; }) => 3
({ int x; if (1) x=2; else x=3; x; }) => 2
({ int x; if (2-1) x=2; else x=3; x; }) => 2
({ int i=0; int j=0; for (i=0; i<=10; i=i+1) j=i+j; j; }) => 55
({ int i=0; while(i<10) i=i+1; i; }) => 10
({ 1; {2;} 3; }) => 3
({ ;;; 5; }) => 5
({ int i=0; while(i<10) i=i+1; i; }) => 10
({ int i=0; int j=0; while(i<=10) {j=i+j; i=i+1;} j; }) => 55
(1,2,3) => 3
({ int i=2, j=3; (i=5,j)=6; i; }) => 5
({ int i=2, j=3; (i=5,j)=6; j; }) => 6
({ int j=0; for (int i=0; i<=10; i=i+1) j=j+i; j; }) => 55
({ int i=3; int j=0; for (int i=0; i<=10; i=i+1) j=j+i; i; }) => 3
0||1 => 1
0||(2-2)||5 => 1
0||0 => 0
0||(2-2) => 0
0&&1 => 0
(2-2)&&5 => 0
1&&5 => 1
({ int i=0; goto a; a: i++; b: i++; c: i++; i; }) => 3
({ int i=0; goto e; d: i++; e: i++; f: i++; i; }) => 2
({ int i=0; goto i; g: i++; h: i++; i: i++; i; }) => 1
({ typedef int foo; goto foo; foo:; 1; }) => 1
({ int i=0; for(;i<10;i++) { if (i == 3) break; } i; }) => 3
({ int i=0; while (1) { if (i++ == 3) break; } i; }) => 4
({ int i=0; for(;i<10;i++) { for (;;) break; if (i == 3) break; } i; }) => 3
({ int i=0; while (1) { while(1) break; if (i++ == 3) break; } i; }) => 4
({ int i=0; int j=0; for (;i<10;i++) { if (i>5) continue; j++; } i; }) => 10
({ int i=0; int j=0; for (;i<10;i++) { if (i>5) continue; j++; } j; }) => 6
({ int i=0; int j=0; for(;!i;) { for (;j!=10;j++) continue; break; } j; }) => 10
({ int i=0; int j=0; while (i++<10) { if (i>5) continue; j++; } i; }) => 11
({ int i=0; int j=0; while (i++<10) { if (i>5) continue; j++; } j; }) => 5
({ int i=0; int j=0; while(!i) { while (j++!=10) continue; break; } j; }) => 11
({ int i=0; switch(0) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 5
({ int i=0; switch(1) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 6
({ int i=0; switch(2) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 7
({ int i=0; switch(3) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 0
({ int i=0; switch(0) { case 0:i=5;break; default:i=7; } i; }) => 5
({ int i=0; switch(1) { case 0:i=5;break; default:i=7; } i; }) => 7
({ int i=0; switch(1) { case 0: 0; case 1: 0; case 2: 0; i=2; } i; }) => 2
({ int i=0; switch(3) { case 0: 0; case 1: 0; case 2: 0; i=2; } i; }) => 0
({ int i=0; switch(-1) { case 0xffffffff: i=3; break; } i; }) => 3
({ int i=0; int j=0; do { j++; } while (i++ < 6); j; }) => 7
({ int i=0; int j=0; int k=0; do { if (++j > 3) break; continue; k++; } while (1); j; }) => 4
0.0 &&0.0 => 0
0.0 &&0.1 => 0
0.3 &&0.0 => 0
0.3 &&0.5 => 1
0.0 ||0.0 => 0
0.0 ||0.1 => 1
0.3 ||0.0 => 1
0.3 ||0.5 => 1
({ int x; if (0.0) x=3; else x=5; x; }) => 5
({ int x; if (0.1) x=3; else x=5; x; }) => 3
({ int x=5; if (0.0) x=3; x; }) => 5
({ int x=5; if (0.1) x=3; x; }) => 3
({ double i=10.0; int j=0; for (; i; i--, j++); j; }) => 10
({ double i=10.0; int j=0; do j++; while(--i); j; }) => 10
OK

test/x64/decl.exe
({ char x; sizeof(x); }) => 1
({ short int x; sizeof(x); }) => 2
({ int short x; sizeof(x); }) => 2
({ int x; sizeof(x); }) => 4
({ long int x; sizeof(x); }) => 8
({ int long x; sizeof(x); }) => 8
({ long long x; sizeof(x); }) => 8
({ _Bool x=0; x; }) => 0
({ _Bool x=1; x; }) => 1
({ _Bool x=2; x; }) => 1
(_Bool)1 => 1
(_Bool)2 => 1
(_Bool)(char)256 => 0
OK

test/x64/enum.exe
({ enum { zero, one, two }; zero; }) => 0
({ enum { zero, one, two }; one; }) => 1
({ enum { zero, one, two }; two; }) => 2
({ enum { five=5, six, seven }; five; }) => 5
({ enum { five=5, six, seven }; six; }) => 6
({ enum { zero, five=5, three=3, four }; zero; }) => 0
({ enum { zero, five=5, three=3, four }; five; }) => 5
({ enum { zero, five=5, three=3, four }; three; }) => 3
({ enum { zero, five=5, three=3, four }; four; }) => 4
({ enum { zero, one, two } x; sizeof(x); }) => 4
({ enum t { zero, one, two }; enum t y; sizeof(y); }) => 4
OK

test/x64/extern.exe
ext1 => 5
*ext2 => 5
ext3 => 7
ext_fn1(5) => 5
ext_fn2(8) => 8
OK

test/x64/float.exe
(float)(char)35 => 35
(float)(short)35 => 35
(float)(int)35 => 35
(float)(long)35 => 35
(float)(unsigned char)35 => 35
(float)(unsigned short)35 => 35
(float)(unsigned int)35 => 35
(float)(unsigned long)35 => 35
(double)(char)35 => 35
(double)(short)35 => 35
(double)(int)35 => 35
(double)(long)35 => 35
(double)(unsigned char)35 => 35
(double)(unsigned short)35 => 35
(double)(unsigned int)35 => 35
(double)(unsigned long)35 => 35
(char)(float)35 => 35
(short)(float)35 => 35
(int)(float)35 => 35
(long)(float)35 => 35
(unsigned char)(float)35 => 35
(unsigned short)(float)35 => 35
(unsigned int)(float)35 => 35
(unsigned long)(float)35 => 35
(char)(double)35 => 35
(short)(double)35 => 35
(int)(double)35 => 35
(long)(double)35 => 35
(unsigned char)(double)35 => 35
(unsigned short)(double)35 => 35
(unsigned int)(double)35 => 35
(unsigned long)(double)35 => 35
2e3==2e3 => 1
2e3==2e5 => 0
2.0==2 => 1
5.1<5 => 0
5.0<5 => 0
4.9<5 => 1
5.1<=5 => 0
5.0<=5 => 1
4.9<=5 => 1
2e3f==2e3 => 1
2e3f==2e5 => 0
2.0f==2 => 1
5.1f<5 => 0
5.0f<5 => 0
4.9f<5 => 1
5.1f<=5 => 0
5.0f<=5 => 1
4.9f<=5 => 1
2.3+3.8 => 6
2.3-3.8 => -1
-3.8 => -3
3.3*4 => 13
5.0/2 => 2
2.3f+3.8f => 6
2.3f+3.8 => 6
2.3f-3.8 => -1
-3.8f => -3
3.3f*4 => 13
5.0f/2 => 2
0.0/0.0 ==0.0/0.0 => 0
0.0/0.0 !=0.0/0.0 => 1
0.0/0.0 < 0 => 0
0.0/0.0 <= 0 => 0
0.0/0.0 > 0 => 0
0.0/0.0 >= 0 => 0
!3. => 0
!0. => 1
!3.f => 0
!0.f => 1
0.0 ? 3 : 5 => 5
1.2 ? 3 : 5 => 3
OK

test/x64/function.exe
ret3() => 3
add2(3, 5) => 8
sub2(5, 3) => 2
add6(1,2,3,4,5,6) => 21
add6(1,2,add6(3,4,5,6,7,8),9,10,11) => 66
add6(1,2,add6(3,add6(4,5,6,7,8,9),10,11,12,13),14,15,16) => 136
add2(3,4) => 7
sub2(4,3) => 1
fib(9) => 55
({ sub_char(7, 3, 3); }) => 1
sub_long(7, 3, 3) => 1
sub_short(7, 3, 3) => 1
*g1_ptr() => 3
int_to_char(261) => 5
int_to_char(261) => 5
div_long(-10, 2) => -5
bool_fn_add(3) => 1
bool_fn_sub(3) => 0
bool_fn_add(-3) => 1
bool_fn_sub(-3) => 0
bool_fn_add(0) => 1
bool_fn_sub(0) => 1
static_fn() => 3
({ int x[2]; x[0]=3; param_decay(x); }) => 3
counter() => 2
counter() => 4
counter() => 6
true_fn() => 1
false_fn() => 0
char_fn() => 3
short_fn() => 5
add_all(3,1,2,3) => 6
add_all(4,1,2,3,-1) => 5
({ char buf[100]; sprintf(buf, "%d %d %s", 1, 2, "foo"); strcmp("1 2 foo", buf); }) => 0
1 2 foo
({ char buf[100]; fmt(buf, "%d %d %s", 1, 2, "foo"); strcmp("1 2 foo", buf); }) => 0
uchar_fn() => 251
ushort_fn() => 65528
schar_fn() => -5
sshort_fn() => -8
add_float(2.3,3.8) => 6
add_double(2.3,3.8) => 6
add_float3(2.5,2.5,2.5) => 7
add_double3(2.5,2.5,2.5) => 7
({ char buf[100]; sprintf(buf, "%.1f", (float)3.5); strcmp(buf, "3.5"); }) => 0
({ char buf[100]; fmt(buf, "%.1f", (float)3.5); strcmp(buf, "3.5"); }) => 0
(add2)(2,3) => 5
(&add2)(2,3) => 5
({ int (*fn)(int,int) = add2; fn(2,5); }) => 7
fnptr(add_all)(3, 1, 2, 3) => 6
param_decay2(ret3) => 3
sizeof(__func__) => 5
strcmp("main", __func__) => 0
strcmp("func_fn", func_fn()) => 0
strcmp("main", __FUNCTION__) => 0
strcmp("function_fn", function_fn()) => 0
OK

test/x64/initializer.exe
({ int x[3]={1,2,3}; x[0]; }) => 1
({ int x[3]={1,2,3}; x[1]; }) => 2
({ int x[3]={1,2,3}; x[2]; }) => 3
({ int x[3]={1,2,3}; x[2]; }) => 3
({ int x[2][3]={{1,2,3},{4,5,6}}; x[0][1]; }) => 2
({ int x[2][3]={{1,2,3},{4,5,6}}; x[1][0]; }) => 4
({ int x[2][3]={{1,2,3},{4,5,6}}; x[1][2]; }) => 6
({ int x[3]={}; x[0]; }) => 0
({ int x[3]={}; x[1]; }) => 0
({ int x[3]={}; x[2]; }) => 0
({ int x[2][3]={{1,2}}; x[0][1]; }) => 2
({ int x[2][3]={{1,2}}; x[1][0]; }) => 0
({ int x[2][3]={{1,2}}; x[1][2]; }) => 0
({ char x[4]="abc"; x[0]; }) => 97
({ char x[4]="abc"; x[2]; }) => 99
({ char x[4]="abc"; x[3]; }) => 0
({ char x[2][4]={"abc","def"}; x[0][0]; }) => 97
({ char x[2][4]={"abc","def"}; x[0][3]; }) => 0
({ char x[2][4]={"abc","def"}; x[1][0]; }) => 100
({ char x[2][4]={"abc","def"}; x[1][2]; }) => 102
({ int x[]={1,2,3,4}; x[3]; }) => 4
({ int x[]={1,2,3,4}; sizeof(x); }) => 16
({ char x[]="foo"; sizeof(x); }) => 4
({ typedef char T[]; T x="foo"; T y="x"; sizeof(x); }) => 4
({ typedef char T[]; T x="foo"; T y="x"; sizeof(y); }) => 2
({ typedef char T[]; T x="x"; T y="foo"; sizeof(x); }) => 2
({ typedef char T[]; T x="x"; T y="foo"; sizeof(y); }) => 4
({ struct {int a; int b; int c;} x={1,2,3}; x.a; }) => 1
({ struct {int a; int b; int c;} x={1,2,3}; x.b; }) => 2
({ struct {int a; int b; int c;} x={1,2,3}; x.c; }) => 3
({ struct {int a; int b; int c;} x={1}; x.a; }) => 1
({ struct {int a; int b; int c;} x={1}; x.b; }) => 0
({ struct {int a; int b; int c;} x={1}; x.c; }) => 0
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[0].a; }) => 1
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[0].b; }) => 2
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[1].a; }) => 3
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[1].b; }) => 4
({ struct {int a; int b;} x[2]={{1,2}}; x[1].b; }) => 0
({ struct {int a; int b;} x={}; x.a; }) => 0
({ struct {int a; int b;} x={}; x.b; }) => 0
({ typedef struct {int a,b,c,d,e,f;} T; T x={1,2,3,4,5,6}; T y; y=x; y.e; }) => 5
({ typedef struct {int a,b;} T; T x={1,2}; T y, z; z=y=x; z.b; }) => 2
({ typedef struct {int a,b;} T; T x={1,2}; T y=x; y.a; }) => 1
({ union { int a; char b[4]; } x={0x01020304}; x.b[0]; }) => 4
({ union { int a; char b[4]; } x={0x01020304}; x.b[1]; }) => 3
({ union { struct { char a,b,c,d; } e; int f; } x={{4,3,2,1}}; x.f; }) => 16909060
g3 => 3
g4 => 4
g5 => 5
g6 => 6
g9[0] => 0
g9[1] => 1
g9[2] => 2
g11[0].a => 1
g11[0].b => 2
g11[1].a => 3
g11[1].b => 4
g12[0].a[0] => 1
g12[0].a[1] => 2
g12[1].a[0] => 0
g12[1].a[1] => 0
g13[0].b[0] => 4
g13[0].b[1] => 3
g13[1].b[0] => 8
g13[1].b[1] => 7
sizeof(g17) => 7
sizeof(g18) => 10
sizeof(g19) => 3
memcmp(g17, "foobar", 7) => 0
memcmp(g18, "foobar\0\0\0", 10) => 0
memcmp(g19, "foo", 3) => 0
strcmp(g20, "foobar") => 0
strcmp(g21, "bar") => 0
strcmp(g22+3, "foobar") => 0
strcmp(g23[0], "foobar") => 0
strcmp(g23[1], "bar") => 0
strcmp(g23[2]+3, "foobar") => 0
g24 => 3
*g25 => 3
*g27 => 2
*g28 => 3
*(int *)g29 => 1
g31[0] => 1
g31[1] => 2
g31[2] => 3
g40[0].a[0] => 1
g40[0].a[1] => 2
g40[1].a[0] => 3
g40[1].a[1] => 4
g41[0].a[0] => 1
g41[0].a[1] => 2
g41[1].a[0] => 3
g41[1].a[1] => 4
({ int x[2][3]={0,1,2,3,4,5}; x[0][0]; }) => 0
({ int x[2][3]={0,1,2,3,4,5}; x[1][0]; }) => 3
({ struct {int a; int b;} x[2]={0,1,2,3}; x[0].a; }) => 0
({ struct {int a; int b;} x[2]={0,1,2,3}; x[1].a; }) => 2
strcmp(g43[0], "foo") => 0
strcmp(g43[1], "bar") => 0
strcmp(g44, "foo") => 0
({ int a[]={1,2,3,}; a[2]; }) => 3
({ struct {int a,b,c;} x={1,2,3,}; x.a; }) => 1
({ union {int a; char b;} x={1,}; x.a; }) => 1
({ enum {x,y,z,}; z; }) => 2
sizeof(g60) => 3
sizeof(g61) => 6
sizeof(g65) => 4
sizeof(g66) => 7
strcmp(g65.b, "oo") => 0
strcmp(g66.b, "oobar") => 0
OK

test/x64/literal.exe
'a' => 97
'\n' => 10
'\x80' => -128
0777 => 511
0x0 => 0
0xa => 10
0XA => 10
0xbeef => 48879
0xBEEF => 48879
0XBEEF => 48879
0b0 => 0
0b1 => 1
0b101111 => 47
0B101111 => 47
sizeof(0) => 4
sizeof(0L) => 8
sizeof(0LU) => 8
sizeof(0UL) => 8
sizeof(0LL) => 8
sizeof(0LLU) => 8
sizeof(0Ull) => 8
sizeof(0l) => 8
sizeof(0ll) => 8
sizeof(0x0L) => 8
sizeof(0b0L) => 8
sizeof(2147483647) => 4
sizeof(2147483648) => 8
0xffffffffffffffff => -1
sizeof(0xffffffffffffffff) => 8
sizeof(4294967295U) => 4
sizeof(4294967296U) => 8
-1U>>30 => 3
-1Ul>>62 => 3
-1ull>>62 => 3
0xffffffffffffffffl>>63 => 1
0xffffffffffffffffll>>63 => 1
18446744073709551615 => -1
sizeof(18446744073709551615) => 8
18446744073709551615>>63 => -1
0xffffffffffffffff => -1
sizeof(0xffffffffffffffff) => 8
0xffffffffffffffff>>63 => 1
01777777777777777777777 => -1
sizeof(01777777777777777777777) => 8
01777777777777777777777>>63 => 1
0b1111111111111111111111111111111111111111111111111111111111111111 => -1
sizeof(0b1111111111111111111111111111111111111111111111111111111111111111) => 8
0b1111111111111111111111111111111111111111111111111111111111111111>>63 => 1
sizeof(2147483648) => 8
sizeof(2147483647) => 4
sizeof(0x1ffffffff) => 8
sizeof(0xffffffff) => 4
0xffffffff>>31 => 1
sizeof(040000000000) => 8
sizeof(037777777777) => 4
037777777777>>31 => 1
sizeof(0b111111111111111111111111111111111) => 8
sizeof(0b11111111111111111111111111111111) => 4
0b11111111111111111111111111111111>>31 => 1
1 << 31 >> 31 => -1
01 << 31 >> 31 => -1
0x1 << 31 >> 31 => -1
0b1 << 31 >> 31 => -1
sizeof(8f) => 4
sizeof(0.3F) => 4
sizeof(0.) => 8
sizeof(.0) => 8
sizeof(5.l) => 8
sizeof(2.0L) => 8
sizeof(char) => 1
sizeof(L'\0') => 4
L'a' => 97
OK

test/x64/macro.exe
include1 => 5
include2 => 7
m => 5
m => 3
m => 3
m => 2
m => 2
m => 3
m => 1
m => 2
M1 => 3
M1 => 4
M1 5 => 12
M1*5 => 23
5 => 5
m => 5
m => 5
M2 => 9
M3 => 12
M4 => 13
m => 3
m => 5
m => 3
m => 5
M7() => 1
M7 => 5
ret3 () => 3
M8(3, 4) => 7
M8(3+4, 4+5) => 24
M8(3+4, 4+5) => 63
M8(, 4+5) => 9
M8((2+3), 4) => 20
M8((2,3), 4) => 12
dbl(2) => 10
M11( a!b `""c)[0] => 97
M11( a!b `""c)[1] => 33
M11( a!b `""c)[2] => 98
M11( a!b `""c)[3] => 32
M11( a!b `""c)[4] => 96
M11( a!b `""c)[5] => 34
M11( a!b `""c)[6] => 34
M11( a!b `""c)[7] => 99
M11( a!b `""c)[8] => 0
paste(1,5) => 15
paste(0,xff) => 255
({ int foobar=3; foobar; }) => 3
paste(5,) => 5
paste(,5) => 5
({ int i3=100; 1+i3; }) => 101
paste2(1+2) => 26
paste3(1+2) => 23
paste4(1,2,3) => 123
m => 3
m => 3
m => 4
m => 4
m => 5
strcmp("foo.bar", "foo.bar") => 0
strcmp("foo. bar", "foo. bar") => 0
strcmp("bar.foo", "bar.foo") => 0
strcmp("bar. foo", "bar. foo") => 0
foo => 3
foo => 4
foo => 3
foo => 4
__STDC__ => 1
strcmp(main_filename1, "test/macro.c") => 0
main_line1 => 5
main_line2 => 7
strcmp(include1_filename, "test/include1.h") => 0
include1_line => 4
M14() => 3
M14() 2 => 2
M14(5) => 5
M14(2, 6) => 8
M14(3,4,5) => 21
M14(3,4,5) => 21
M14(5) => 5
OK

test/x64/pointer.exe
({ int x=3; *&x; }) => 3
({ int x=3; int *y=&x; int **z=&y; **z; }) => 3
({ int x=3; int y=5; *(&x+1); }) => 5
({ int x=3; int y=5; *(&y-1); }) => 3
({ int x=3; int y=5; *(&x-(-1)); }) => 5
({ int x=3; int *y=&x; *y=5; x; }) => 5
({ int x=3; int y=5; *(&x+1)=7; y; }) => 7
({ int x=3; int y=5; *(&y-2+1)=7; x; }) => 7
({ int x=3; (&x+2)-&x+3; }) => 5
({ int x, y; x=3; y=5; x+y; }) => 8
({ int x=3, y=5; x+y; }) => 8
({ int x[2]; int *y=&x; *y=3; *x; }) => 3
({ int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *x; }) => 3
({ int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+1); }) => 4
({ int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+2); }) => 5
({ int x[2][3]; int *y=x; *y=0; **x; }) => 0
({ int x[2][3]; int *y=x; *(y+1)=1; *(*x+1); }) => 1
({ int x[2][3]; int *y=x; *(y+2)=2; *(*x+2); }) => 2
({ int x[2][3]; int *y=x; *(y+3)=3; **(x+1); }) => 3
({ int x[2][3]; int *y=x; *(y+4)=4; *(*(x+1)+1); }) => 4
({ int x[2][3]; int *y=x; *(y+5)=5; *(*(x+1)+2); }) => 5
({ int x[3]; *x=3; x[1]=4; x[2]=5; *x; }) => 3
({ int x[3]; *x=3; x[1]=4; x[2]=5; *(x+1); }) => 4
({ int x[3]; *x=3; x[1]=4; x[2]=5; *(x+2); }) => 5
({ int x[3]; *x=3; x[1]=4; x[2]=5; *(x+2); }) => 5
({ int x[3]; *x=3; x[1]=4; 2[x]=5; *(x+2); }) => 5
({ int x[2][3]; int *y=x; y[0]=0; x[0][0]; }) => 0
({ int x[2][3]; int *y=x; y[1]=1; x[0][1]; }) => 1
({ int x[2][3]; int *y=x; y[2]=2; x[0][2]; }) => 2
({ int x[2][3]; int *y=x; y[3]=3; x[1][0]; }) => 3
({ int x[2][3]; int *y=x; y[4]=4; x[1][1]; }) => 4
({ int x[2][3]; int *y=x; y[5]=5; x[1][2]; }) => 5
OK

test/x64/sizeof.exe
sizeof(char) => 1
sizeof(short) => 2
sizeof(short int) => 2
sizeof(int short) => 2
sizeof(int) => 4
sizeof(long) => 8
sizeof(long int) => 8
sizeof(long int) => 8
sizeof(char *) => 8
sizeof(int *) => 8
sizeof(long *) => 8
sizeof(int **) => 8
sizeof(int(*)[4]) => 8
sizeof(int*[4]) => 32
sizeof(int[4]) => 16
sizeof(int[3][4]) => 48
sizeof(struct {int a; int b;}) => 8
sizeof(-10 + (long)5) => 8
sizeof(-10 - (long)5) => 8
sizeof(-10 * (long)5) => 8
sizeof(-10 / (long)5) => 8
sizeof((long)-10 + 5) => 8
sizeof((long)-10 - 5) => 8
sizeof((long)-10 * 5) => 8
sizeof((long)-10 / 5) => 8
({ char i; sizeof(++i); }) => 1
sizeof(int(*)[10]) => 8
sizeof(int(*)[][10]) => 8
sizeof(struct { int x, y[]; }) => 4
sizeof(char) => 1
sizeof(signed char) => 1
sizeof(signed char signed) => 1
sizeof(unsigned char) => 1
sizeof(unsigned char unsigned) => 1
sizeof(short) => 2
sizeof(int short) => 2
sizeof(short int) => 2
sizeof(signed short) => 2
sizeof(int short signed) => 2
sizeof(unsigned short) => 2
sizeof(int short unsigned) => 2
sizeof(int) => 4
sizeof(signed int) => 4
sizeof(signed) => 4
sizeof(signed signed) => 4
sizeof(unsigned int) => 4
sizeof(unsigned) => 4
sizeof(unsigned unsigned) => 4
sizeof(long) => 8
sizeof(signed long) => 8
sizeof(signed long int) => 8
sizeof(unsigned long) => 8
sizeof(unsigned long int) => 8
sizeof(long long) => 8
sizeof(signed long long) => 8
sizeof(signed long long int) => 8
sizeof(unsigned long long) => 8
sizeof(unsigned long long int) => 8
sizeof((char)1) => 1
sizeof((short)1) => 2
sizeof((int)1) => 4
sizeof((long)1) => 8
sizeof((char)1 + (char)1) => 4
sizeof((short)1 + (short)1) => 4
sizeof(1?2:3) => 4
sizeof(1?(short)2:(char)3) => 4
sizeof(1?(long)2:(char)3) => 8
sizeof(char) << 31 >> 31 => 1
sizeof(char) << 63 >> 63 => 1
sizeof(float) => 4
sizeof(double) => 8
sizeof(1f+2) => 4
sizeof(1.0+2) => 8
sizeof(1f-2) => 4
sizeof(1.0-2) => 8
sizeof(1f*2) => 4
sizeof(1.0*2) => 8
sizeof(1f/2) => 4
sizeof(1.0/2) => 8
sizeof(long double) => 8
OK

test/x64/stdhdr.exe
OK

test/x64/string.exe
""[0] => 0
sizeof("") => 1
"abc"[0] => 97
"abc"[1] => 98
"abc"[2] => 99
"abc"[3] => 0
sizeof("abc") => 4
"\a"[0] => 7
"\b"[0] => 8
"\t"[0] => 9
"\n"[0] => 10
"\v"[0] => 11
"\f"[0] => 12
"\r"[0] => 13
"\e"[0] => 27
"\j"[0] => 106
"\k"[0] => 107
"\l"[0] => 108
"\ax\ny"[0] => 7
"\ax\ny"[1] => 120
"\ax\ny"[2] => 10
"\ax\ny"[3] => 121
"\0"[0] => 0
"\20"[0] => 16
"\101"[0] => 65
"\1500"[0] => 104
"\x00"[0] => 0
"\x77"[0] => 119
sizeof("abc" "def") => 7
sizeof("abc" "d" "efgh") => 9
strcmp("abc" "d" "\nefgh", "abcd\nefgh") => 0
!strcmp("abc" "d", "abcd\nefgh") => 0
strcmp("\x9" "0", "\t0") => 0
OK

test/x64/struct.exe
({ struct {int a; int b;} x; x.a=1; x.b=2; x.a; }) => 1
({ struct {int a; int b;} x; x.a=1; x.b=2; x.b; }) => 2
({ struct {char a; int b; char c;} x; x.a=1; x.b=2; x.c=3; x.a; }) => 1
({ struct {char a; int b; char c;} x; x.b=1; x.b=2; x.c=3; x.b; }) => 2
({ struct {char a; int b; char c;} x; x.a=1; x.b=2; x.c=3; x.c; }) => 3
({ struct {char a; char b;} x[3]; char *p=x; p[0]=0; x[0].a; }) => 0
({ struct {char a; char b;} x[3]; char *p=x; p[1]=1; x[0].b; }) => 1
({ struct {char a; char b;} x[3]; char *p=x; p[2]=2; x[1].a; }) => 2
({ struct {char a; char b;} x[3]; char *p=x; p[3]=3; x[1].b; }) => 3
({ struct {char a[3]; char b[5];} x; char *p=&x; x.a[0]=6; p[0]; }) => 6
({ struct {char a[3]; char b[5];} x; char *p=&x; x.b[0]=7; p[3]; }) => 7
({ struct { struct { char b; } a; } x; x.a.b=6; x.a.b; }) => 6
({ struct {int a;} x; sizeof(x); }) => 4
({ struct {int a; int b;} x; sizeof(x); }) => 8
({ struct {int a, b;} x; sizeof(x); }) => 8
({ struct {int a[3];} x; sizeof(x); }) => 12
({ struct {int a;} x[4]; sizeof(x); }) => 16
({ struct {int a[3];} x[2]; sizeof(x); }) => 24
({ struct {char a; char b;} x; sizeof(x); }) => 2
({ struct {} x; sizeof(x); }) => 0
({ struct {char a; int b;} x; sizeof(x); }) => 8
({ struct {int a; char b;} x; sizeof(x); }) => 8
({ struct t {int a; int b;} x; struct t y; sizeof(y); }) => 8
({ struct t {int a; int b;}; struct t y; sizeof(y); }) => 8
({ struct t {char a[2];}; { struct t {char a[4];}; } struct t y; sizeof(y); }) => 2
({ struct t {int x;}; int t=1; struct t y; y.x=2; t+y.x; }) => 3
({ struct t {char a;} x; struct t *y = &x; x.a=3; y->a; }) => 3
({ struct t {char a;} x; struct t *y = &x; y->a=3; x.a; }) => 3
({ struct {int a,b;} x,y; x.a=3; y=x; y.a; }) => 3
({ struct t {int a,b;}; struct t x; x.a=7; struct t y; struct t *z=&y; *z=x; y.a; }) => 7
({ struct t {int a,b;}; struct t x; x.a=7; struct t y, *p=&x, *q=&y; *q=*p; y.a; }) => 7
({ struct t {char a, b;} x, y; x.a=5; y=x; y.a; }) => 5
({ struct t {int a; int b;} x; struct t y; sizeof(y); }) => 8
({ struct t {int a; int b;}; struct t y; sizeof(y); }) => 8
({ struct {char a; long b;} x; sizeof(x); }) => 16
({ struct {char a; short b;} x; sizeof(x); }) => 4
({ struct foo *bar; sizeof(bar); }) => 8
({ struct T *foo; struct T {int x;}; sizeof(struct T); }) => 4
({ struct T { struct T *next; int x; } a; struct T b; b.x=1; a.next=&b; a.next->x; }) => 1
({ typedef struct T T; struct T { int x; }; sizeof(T); }) => 4
OK

test/x64/typedef.exe
({ typedef int t; t x=1; x; }) => 1
({ typedef struct {int a;} t; t x; x.a=1; x.a; }) => 1
({ typedef int t; t t=1; t; }) => 1
({ typedef struct {int a;} t; { typedef int t; } t x; x.a=2; x.a; }) => 2
({ typedef t; t x; sizeof(x); }) => 4
({ MyInt x=3; x; }) => 3
({ MyInt2 x; sizeof(x); }) => 16
OK

test/x64/union.exe
({ union { int a; char b[6]; } x; sizeof(x); }) => 8
({ union { int a; char b[4]; } x; x.a = 515; x.b[0]; }) => 3
({ union { int a; char b[4]; } x; x.a = 515; x.b[1]; }) => 2
({ union { int a; char b[4]; } x; x.a = 515; x.b[2]; }) => 0
({ union { int a; char b[4]; } x; x.a = 515; x.b[3]; }) => 0
({ union {int a,b;} x,y; x.a=3; y.a=5; y=x; y.a; }) => 3
({ union {struct {int a,b;} c;} x,y; x.c.b=3; y.c.b=5; y=x; y.c.b; }) => 3
OK

test/x64/usualconv.exe
-10 + (long)5 => -5
-10 - (long)5 => -15
-10 * (long)5 => -50
-10 / (long)5 => -2
-2 < (long)-1 => 1
-2 <= (long)-1 => 1
-2 > (long)-1 => 0
-2 >= (long)-1 => 0
(long)-2 < -1 => 1
(long)-2 <= -1 => 1
(long)-2 > -1 => 0
(long)-2 >= -1 => 0
2147483647 + 2147483647 + 2 => 0
({ long x; x=-1; x; }) => -1
({ char x[3]; x[0]=0; x[1]=1; x[2]=2; char *y=x+1; y[0]; }) => 1
({ char x[3]; x[0]=0; x[1]=1; x[2]=2; char *y=x+1; y[-1]; }) => 0
({ struct t {char a;} x, y; x.a=5; y=x; y.a; }) => 5
(1 ? ret10 : (void *)0)() => 10
OK

test/x64/varargs.exe
sum1(1, 2, 3, 0) => 6
sum2(1,2.0, 3,4.0, 5,6.0, 0) => 21
OK

test/x64/variable.exe
({ int a; a=3; a; }) => 3
({ int a=3; a; }) => 3
({ int a=3; int z=5; a+z; }) => 8
({ int a=3; a; }) => 3
({ int a=3; int z=5; a+z; }) => 8
({ int a; int b; a=b=3; a+b; }) => 6
({ int foo=3; foo; }) => 3
({ int foo123=3; int bar=5; foo123+bar; }) => 8
({ int x; sizeof(x); }) => 4
({ int x; sizeof x; }) => 4
({ int *x; sizeof(x); }) => 8
({ int x[4]; sizeof(x); }) => 16
({ int x[3][4]; sizeof(x); }) => 48
({ int x[3][4]; sizeof(*x); }) => 16
({ int x[3][4]; sizeof(**x); }) => 4
({ int x[3][4]; sizeof(**x) + 1; }) => 5
({ int x[3][4]; sizeof **x + 1; }) => 5
({ int x[3][4]; sizeof(**x + 1); }) => 4
({ int x=1; sizeof(x=2); }) => 4
({ int x=1; sizeof(x=2); x; }) => 1
g1 => 0
({ g1=3; g1; }) => 3
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[0]; }) => 0
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[1]; }) => 1
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[2]; }) => 2
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[3]; }) => 3
sizeof(g1) => 4
sizeof(g2) => 16
({ char x=1; x; }) => 1
({ char x=1; char y=2; x; }) => 1
({ char x=1; char y=2; y; }) => 2
({ char x; sizeof(x); }) => 1
({ char x[10]; sizeof(x); }) => 10
({ int x=2; { int x=3; } x; }) => 2
({ int x=2; { int x=3; } int y=4; x; }) => 2
({ int x=2; { x=3; } x; }) => 3
({ int x; int y; char z; char *a=&y; char *b=&z; b-a; }) => 7
({ int x; char y; int z; char *a=&y; char *b=&z; b-a; }) => 1
({ long x; sizeof(x); }) => 8
({ short x; sizeof(x); }) => 2
({ char *x[3]; sizeof(x); }) => 24
({ char (*x)[3]; sizeof(x); }) => 8
({ char (x); sizeof(x); }) => 1
({ char (x)[3]; sizeof(x); }) => 3
({ char (x[3])[4]; sizeof(x); }) => 12
({ char (x[3])[4]; sizeof(x[0]); }) => 4
({ char *x[3]; char y; x[0]=&y; y=3; x[0][0]; }) => 3
({ char x[3]; char (*y)[3]=x; y[0][0]=4; y[0][0]; }) => 4
g3 => 3
OK

test/driver.sh ./chibicc
testing -o ... passed
testing --help ... passed
testing -march=x64 ... passed
testing -march=riscv ... passed
testing -S ... passed
testing default output file ... passed
testing default output file ... passed
testing multiple input files ... passed
testing multiple input files ... passed
testing linker ... passed
testing linker ... passed
testing a.out ... passed
testing -E ... passed
testing -E and -o ... passed
testing -I ... passed
OK
make[1]: Leaving directory '/home/corco/github.com/daily/cike/chibicc/c197'
make test-stage2 ARCH=x64
make[1]: Entering directory '/home/corco/github.com/daily/cike/chibicc/c197'
mkdir -p stage2/test
./chibicc -march=x64 -c -o stage2/codegen.o ./sourcecodegen.c
mkdir -p stage2/test
./chibicc -march=x64 -c -o stage2/main.o ./sourcemain.c
mkdir -p stage2/test
./chibicc -march=x64 -c -o stage2/parse.o ./sourceparse.c
mkdir -p stage2/test
./chibicc -march=x64 -c -o stage2/preprocess.o ./sourcepreprocess.c
mkdir -p stage2/test
./chibicc -march=x64 -c -o stage2/strings.o ./sourcestrings.c
mkdir -p stage2/test
./chibicc -march=x64 -c -o stage2/tokenize.o ./sourcetokenize.c
mkdir -p stage2/test
./chibicc -march=x64 -c -o stage2/type.o ./sourcetype.c
gcc -std=c11 -g -fno-common  -o stage2/chibicc stage2/codegen.o stage2/main.o stage2/parse.o stage2/preprocess.o stage2/strings.o stage2/tokenize.o stage2/type.o
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/alignof.o test/alignof.c
gcc -o stage2/test/alignof.exe stage2/test/alignof.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/arith.o test/arith.c
gcc -o stage2/test/arith.exe stage2/test/arith.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/cast.o test/cast.c
gcc -o stage2/test/cast.exe stage2/test/cast.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/compat.o test/compat.c
gcc -o stage2/test/compat.exe stage2/test/compat.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/complit.o test/complit.c
gcc -o stage2/test/complit.exe stage2/test/complit.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/const.o test/const.c
gcc -o stage2/test/const.exe stage2/test/const.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/constexpr.o test/constexpr.c
gcc -o stage2/test/constexpr.exe stage2/test/constexpr.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/control.o test/control.c
gcc -o stage2/test/control.exe stage2/test/control.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/decl.o test/decl.c
gcc -o stage2/test/decl.exe stage2/test/decl.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/enum.o test/enum.c
gcc -o stage2/test/enum.exe stage2/test/enum.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/extern.o test/extern.c
gcc -o stage2/test/extern.exe stage2/test/extern.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/float.o test/float.c
gcc -o stage2/test/float.exe stage2/test/float.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/function.o test/function.c
gcc -o stage2/test/function.exe stage2/test/function.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/initializer.o test/initializer.c
gcc -o stage2/test/initializer.exe stage2/test/initializer.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/literal.o test/literal.c
gcc -o stage2/test/literal.exe stage2/test/literal.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/macro.o test/macro.c
gcc -o stage2/test/macro.exe stage2/test/macro.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/pointer.o test/pointer.c
gcc -o stage2/test/pointer.exe stage2/test/pointer.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/sizeof.o test/sizeof.c
gcc -o stage2/test/sizeof.exe stage2/test/sizeof.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/stdhdr.o test/stdhdr.c
gcc -o stage2/test/stdhdr.exe stage2/test/stdhdr.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/string.o test/string.c
gcc -o stage2/test/string.exe stage2/test/string.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/struct.o test/struct.c
gcc -o stage2/test/struct.exe stage2/test/struct.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/typedef.o test/typedef.c
gcc -o stage2/test/typedef.exe stage2/test/typedef.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/union.o test/union.c
gcc -o stage2/test/union.exe stage2/test/union.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/usualconv.o test/usualconv.c
gcc -o stage2/test/usualconv.exe stage2/test/usualconv.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/varargs.o test/varargs.c
gcc -o stage2/test/varargs.exe stage2/test/varargs.o -xc test/common
mkdir -p stage2/test
./stage2/chibicc -Iinclude -Itest -c -o stage2/test/variable.o test/variable.c
gcc -o stage2/test/variable.exe stage2/test/variable.o -xc test/common
for i in stage2/test/alignof.exe stage2/test/arith.exe stage2/test/cast.exe stage2/test/compat.exe stage2/test/complit.exe stage2/test/const.exe stage2/test/constexpr.exe stage2/test/control.exe stage2/test/decl.exe stage2/test/enum.exe stage2/test/extern.exe stage2/test/float.exe stage2/test/function.exe stage2/test/initializer.exe stage2/test/literal.exe stage2/test/macro.exe stage2/test/pointer.exe stage2/test/sizeof.exe stage2/test/stdhdr.exe stage2/test/string.exe stage2/test/struct.exe stage2/test/typedef.exe stage2/test/union.exe stage2/test/usualconv.exe stage2/test/varargs.exe stage2/test/variable.exe; do echo $i; ./$i || exit 1; echo; done
stage2/test/alignof.exe
_Alignof(char) => 1
_Alignof(short) => 2
_Alignof(int) => 4
_Alignof(long) => 8
_Alignof(long long) => 8
_Alignof(char[3]) => 1
_Alignof(int[3]) => 4
_Alignof(struct {char a; char b;}[2]) => 1
_Alignof(struct {char a; long b;}[2]) => 8
({ _Alignas(char) char x, y; &y-&x; }) => 1
({ _Alignas(long) char x, y; &y-&x; }) => 8
({ _Alignas(32) char x, y; &y-&x; }) => 32
({ _Alignas(32) int *x, *y; ((char *)&y)-((char *)&x); }) => 32
({ struct { _Alignas(16) char x, y; } a; &a.y-&a.x; }) => 16
({ struct T { _Alignas(8) char a; }; _Alignof(struct T); }) => 8
(long)(char *)&g1 % 512 => 0
(long)(char *)&g2 % 512 => 0
(long)(char *)&g4 % 4 => 0
(long)(char *)&g5 % 8 => 0
({ char x; _Alignof(x); }) => 1
({ int x; _Alignof(x); }) => 4
({ char x; _Alignof x; }) => 1
({ int x; _Alignof x; }) => 4
_Alignof(char) << 31 >> 31 => 1
_Alignof(char) << 63 >> 63 => 1
({ char x; _Alignof(x) << 63 >> 63; }) => 1
OK

stage2/test/arith.exe
0 => 0
42 => 42
5+20-4 => 21
12 + 34 - 5 => 41
5+6*7 => 47
5*(9-6) => 15
(3+5)/2 => 4
-10+20 => 10
- -10 => 10
- - +10 => 10
0==1 => 0
42==42 => 1
0!=1 => 1
42!=42 => 0
0<1 => 1
1<1 => 0
2<1 => 0
0<=1 => 1
1<=1 => 1
2<=1 => 0
1>0 => 1
1>1 => 0
1>2 => 0
1>=0 => 1
1>=1 => 1
1>=2 => 0
1073741824 * 100 / 100 => 0
({ int i=2; i+=5; i; }) => 7
({ int i=2; i+=5; }) => 7
({ int i=5; i-=2; i; }) => 3
({ int i=5; i-=2; }) => 3
({ int i=3; i*=2; i; }) => 6
({ int i=3; i*=2; }) => 6
({ int i=6; i/=2; i; }) => 3
({ int i=6; i/=2; }) => 3
({ int i=2; ++i; }) => 3
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; ++*p; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; --*p; }) => 0
({ int i=2; i++; }) => 2
({ int i=2; i--; }) => 2
({ int i=2; i++; i; }) => 3
({ int i=2; i--; i; }) => 1
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p++; }) => 1
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p--; }) => 1
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[0]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*(p--))--; a[1]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p)--; a[2]; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p)--; p++; *p; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[0]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[1]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[2]; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; *p; }) => 2
!1 => 0
!2 => 0
!0 => 1
!(char)0 => 1
!(long)3 => 0
sizeof(!(char)0) => 4
sizeof(!(long)0) => 4
~0 => -1
~-1 => 0
17%6 => 5
((long)17)%6 => 5
({ int i=10; i%=4; i; }) => 2
({ long i=10; i%=4; i; }) => 2
0&1 => 0
3&1 => 1
7&3 => 3
-1&10 => 10
0|1 => 1
0b10000|0b00011 => 19
0^0 => 0
0b1111^0b1111 => 0
0b111000^0b001100 => 52
({ int i=6; i&=3; i; }) => 2
({ int i=6; i|=3; i; }) => 7
({ int i=15; i^=5; i; }) => 10
0?1:2 => 2
1?1:2 => 1
0?-2:-1 => -1
1?-2:-1 => -2
sizeof(0?1:2) => 4
sizeof(0?(long)1:(long)2) => 8
0?(long)-2:-1 => -1
0?-2:(long)-1 => -1
1?(long)-2:-1 => -2
1?-2:(long)-1 => -2
({ int x; int *p=&x; p+20-p; }) => 20
({ int x; int *p=&x; p+20-p>0; }) => 1
({ int x; int *p=&x; p-20-p; }) => -20
({ int x; int *p=&x; p-20-p<0; }) => 1
(char *)0xffffffffffffffff - (char *)0xfffffffffffffff0 => 15
(char *)0xfffffffffffffff0 - (char *)0xffffffffffffffff => -15
(void *)0xffffffffffffffff > (void *)0 => 1
OK

stage2/test/cast.exe
(int)8590066177 => 131585
(short)8590066177 => 513
(char)8590066177 => 1
(long)1 => 1
(long)&*(int *)0 => 0
({ int x=512; *(char *)&x=1; x; }) => 513
({ int x=5; long y=(long)&x; *(int*)y; }) => 5
(char)255 => -1
(signed char)255 => -1
(unsigned char)255 => 255
(short)65535 => -1
(unsigned short)65535 => 65535
(int)0xffffffff => -1
(unsigned)0xffffffff => -1
-1<1 => 1
-1<(unsigned)1 => 0
(char)127+(char)127 => 254
(short)32767+(short)32767 => 65534
-1>>1 => -1
(unsigned long)-1 => -1
((unsigned)-1)>>1 => 2147483647
(-100)/2 => -50
((unsigned)-100)/2 => 2147483598
((unsigned long)-100)/2 => -50
((long)-1)/(unsigned)100 => 0
(-100)%7 => -2
((unsigned)-100)%7 => 2
((unsigned long)-100)%9 => 6
(int)(unsigned short)65535 => 65535
({ unsigned short x = 65535; x; }) => 65535
({ unsigned short x = 65535; (int)x; }) => 65535
({ typedef short T; T x = 65535; (int)x; }) => -1
({ typedef unsigned short T; T x = 65535; (int)x; }) => 65535
(_Bool)0.0 => 0
(_Bool)0.1 => 1
(char)3.0 => 3
(short)1000.3 => 1000
(int)3.99 => 3
(long)2e15 => 1233977344
(float)3.5 => 3
(double)(float)5.5 => 5
(float)3 => 3
(double)3 => 3
(float)3L => 3
(double)3L => 3
OK

stage2/test/compat.exe
OK

stage2/test/complit.exe
(int){1} => 1
((int[]){0,1,2})[2] => 2
((struct {char a; int b;}){'a', 3}).a => 97
({ int x=3; (int){x}; }) => 3
tree->val => 1
tree->lhs->val => 2
tree->lhs->lhs->val => 3
tree->lhs->rhs->val => 4
OK

stage2/test/const.exe
({ const x = 5; x; }) => 5
({ const x = 8; int *const y=&x; *y; }) => 8
({ const x = 6; *(const * const)&x; }) => 6
OK

stage2/test/constexpr.exe
({ enum { ten=1+2+3+4 }; ten; }) => 10
({ int i=0; switch(3) { case 5-2+0*3: i++; } i; }) => 1
({ int x[1+1]; sizeof(x); }) => 8
({ char x[8-2]; sizeof(x); }) => 6
({ char x[2*3]; sizeof(x); }) => 6
({ char x[12/4]; sizeof(x); }) => 3
({ char x[12%10]; sizeof(x); }) => 2
({ char x[0b110&0b101]; sizeof(x); }) => 4
({ char x[0b110|0b101]; sizeof(x); }) => 7
({ char x[0b111^0b001]; sizeof(x); }) => 6
({ char x[1<<2]; sizeof(x); }) => 4
({ char x[4>>1]; sizeof(x); }) => 2
({ char x[(1==1)+1]; sizeof(x); }) => 2
({ char x[(1!=1)+1]; sizeof(x); }) => 1
({ char x[(1<1)+1]; sizeof(x); }) => 1
({ char x[(1<=1)+1]; sizeof(x); }) => 2
({ char x[1?2:3]; sizeof(x); }) => 2
({ char x[0?2:3]; sizeof(x); }) => 3
({ char x[(1,3)]; sizeof(x); }) => 3
({ char x[!0+1]; sizeof(x); }) => 2
({ char x[!1+1]; sizeof(x); }) => 1
({ char x[~-3]; sizeof(x); }) => 2
({ char x[(5||6)+1]; sizeof(x); }) => 2
({ char x[(0||0)+1]; sizeof(x); }) => 1
({ char x[(1&&1)+1]; sizeof(x); }) => 2
({ char x[(1&&0)+1]; sizeof(x); }) => 1
({ char x[(int)3]; sizeof(x); }) => 3
({ char x[(char)0xffffff0f]; sizeof(x); }) => 15
({ char x[(short)0xffff010f]; sizeof(x); }) => 271
({ char x[(int)0xfffffffffff+5]; sizeof(x); }) => 4
({ char x[(int*)0+2]; sizeof(x); }) => 8
({ char x[(int*)16-1]; sizeof(x); }) => 12
({ char x[(int*)16-(int*)4]; sizeof(x); }) => 3
({ char x[(-1>>31)+5]; sizeof(x); }) => 4
({ char x[(unsigned char)0xffffffff]; sizeof(x); }) => 255
({ char x[(unsigned short)0xffff800f]; sizeof(x); }) => 32783
({ char x[(unsigned int)0xfffffffffff>>31]; sizeof(x); }) => 1
({ char x[(long)-1/((long)1<<62)+1]; sizeof(x); }) => 1
({ char x[(unsigned long)-1/((long)1<<62)+1]; sizeof(x); }) => 4
({ char x[(unsigned)1<-1]; sizeof(x); }) => 1
({ char x[(unsigned)1<=-1]; sizeof(x); }) => 1
g40==1.5 => 1
g41==11 => 1
OK

stage2/test/control.exe
({ int x; if (0) x=2; else x=3; x; }) => 3
({ int x; if (1-1) x=2; else x=3; x; }) => 3
({ int x; if (1) x=2; else x=3; x; }) => 2
({ int x; if (2-1) x=2; else x=3; x; }) => 2
({ int i=0; int j=0; for (i=0; i<=10; i=i+1) j=i+j; j; }) => 55
({ int i=0; while(i<10) i=i+1; i; }) => 10
({ 1; {2;} 3; }) => 3
({ ;;; 5; }) => 5
({ int i=0; while(i<10) i=i+1; i; }) => 10
({ int i=0; int j=0; while(i<=10) {j=i+j; i=i+1;} j; }) => 55
(1,2,3) => 3
({ int i=2, j=3; (i=5,j)=6; i; }) => 5
({ int i=2, j=3; (i=5,j)=6; j; }) => 6
({ int j=0; for (int i=0; i<=10; i=i+1) j=j+i; j; }) => 55
({ int i=3; int j=0; for (int i=0; i<=10; i=i+1) j=j+i; i; }) => 3
0||1 => 1
0||(2-2)||5 => 1
0||0 => 0
0||(2-2) => 0
0&&1 => 0
(2-2)&&5 => 0
1&&5 => 1
({ int i=0; goto a; a: i++; b: i++; c: i++; i; }) => 3
({ int i=0; goto e; d: i++; e: i++; f: i++; i; }) => 2
({ int i=0; goto i; g: i++; h: i++; i: i++; i; }) => 1
({ typedef int foo; goto foo; foo:; 1; }) => 1
({ int i=0; for(;i<10;i++) { if (i == 3) break; } i; }) => 3
({ int i=0; while (1) { if (i++ == 3) break; } i; }) => 4
({ int i=0; for(;i<10;i++) { for (;;) break; if (i == 3) break; } i; }) => 3
({ int i=0; while (1) { while(1) break; if (i++ == 3) break; } i; }) => 4
({ int i=0; int j=0; for (;i<10;i++) { if (i>5) continue; j++; } i; }) => 10
({ int i=0; int j=0; for (;i<10;i++) { if (i>5) continue; j++; } j; }) => 6
({ int i=0; int j=0; for(;!i;) { for (;j!=10;j++) continue; break; } j; }) => 10
({ int i=0; int j=0; while (i++<10) { if (i>5) continue; j++; } i; }) => 11
({ int i=0; int j=0; while (i++<10) { if (i>5) continue; j++; } j; }) => 5
({ int i=0; int j=0; while(!i) { while (j++!=10) continue; break; } j; }) => 11
({ int i=0; switch(0) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 5
({ int i=0; switch(1) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 6
({ int i=0; switch(2) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 7
({ int i=0; switch(3) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 0
({ int i=0; switch(0) { case 0:i=5;break; default:i=7; } i; }) => 5
({ int i=0; switch(1) { case 0:i=5;break; default:i=7; } i; }) => 7
({ int i=0; switch(1) { case 0: 0; case 1: 0; case 2: 0; i=2; } i; }) => 2
({ int i=0; switch(3) { case 0: 0; case 1: 0; case 2: 0; i=2; } i; }) => 0
({ int i=0; switch(-1) { case 0xffffffff: i=3; break; } i; }) => 3
({ int i=0; int j=0; do { j++; } while (i++ < 6); j; }) => 7
({ int i=0; int j=0; int k=0; do { if (++j > 3) break; continue; k++; } while (1); j; }) => 4
0.0 &&0.0 => 0
0.0 &&0.1 => 0
0.3 &&0.0 => 0
0.3 &&0.5 => 1
0.0 ||0.0 => 0
0.0 ||0.1 => 1
0.3 ||0.0 => 1
0.3 ||0.5 => 1
({ int x; if (0.0) x=3; else x=5; x; }) => 5
({ int x; if (0.1) x=3; else x=5; x; }) => 3
({ int x=5; if (0.0) x=3; x; }) => 5
({ int x=5; if (0.1) x=3; x; }) => 3
({ double i=10.0; int j=0; for (; i; i--, j++); j; }) => 10
({ double i=10.0; int j=0; do j++; while(--i); j; }) => 10
OK

stage2/test/decl.exe
({ char x; sizeof(x); }) => 1
({ short int x; sizeof(x); }) => 2
({ int short x; sizeof(x); }) => 2
({ int x; sizeof(x); }) => 4
({ long int x; sizeof(x); }) => 8
({ int long x; sizeof(x); }) => 8
({ long long x; sizeof(x); }) => 8
({ _Bool x=0; x; }) => 0
({ _Bool x=1; x; }) => 1
({ _Bool x=2; x; }) => 1
(_Bool)1 => 1
(_Bool)2 => 1
(_Bool)(char)256 => 0
OK

stage2/test/enum.exe
({ enum { zero, one, two }; zero; }) => 0
({ enum { zero, one, two }; one; }) => 1
({ enum { zero, one, two }; two; }) => 2
({ enum { five=5, six, seven }; five; }) => 5
({ enum { five=5, six, seven }; six; }) => 6
({ enum { zero, five=5, three=3, four }; zero; }) => 0
({ enum { zero, five=5, three=3, four }; five; }) => 5
({ enum { zero, five=5, three=3, four }; three; }) => 3
({ enum { zero, five=5, three=3, four }; four; }) => 4
({ enum { zero, one, two } x; sizeof(x); }) => 4
({ enum t { zero, one, two }; enum t y; sizeof(y); }) => 4
OK

stage2/test/extern.exe
ext1 => 5
*ext2 => 5
ext3 => 7
ext_fn1(5) => 5
ext_fn2(8) => 8
OK

stage2/test/float.exe
(float)(char)35 => 35
(float)(short)35 => 35
(float)(int)35 => 35
(float)(long)35 => 35
(float)(unsigned char)35 => 35
(float)(unsigned short)35 => 35
(float)(unsigned int)35 => 35
(float)(unsigned long)35 => 35
(double)(char)35 => 35
(double)(short)35 => 35
(double)(int)35 => 35
(double)(long)35 => 35
(double)(unsigned char)35 => 35
(double)(unsigned short)35 => 35
(double)(unsigned int)35 => 35
(double)(unsigned long)35 => 35
(char)(float)35 => 35
(short)(float)35 => 35
(int)(float)35 => 35
(long)(float)35 => 35
(unsigned char)(float)35 => 35
(unsigned short)(float)35 => 35
(unsigned int)(float)35 => 35
(unsigned long)(float)35 => 35
(char)(double)35 => 35
(short)(double)35 => 35
(int)(double)35 => 35
(long)(double)35 => 35
(unsigned char)(double)35 => 35
(unsigned short)(double)35 => 35
(unsigned int)(double)35 => 35
(unsigned long)(double)35 => 35
2e3==2e3 => 1
2e3==2e5 => 0
2.0==2 => 1
5.1<5 => 0
5.0<5 => 0
4.9<5 => 1
5.1<=5 => 0
5.0<=5 => 1
4.9<=5 => 1
2e3f==2e3 => 1
2e3f==2e5 => 0
2.0f==2 => 1
5.1f<5 => 0
5.0f<5 => 0
4.9f<5 => 1
5.1f<=5 => 0
5.0f<=5 => 1
4.9f<=5 => 1
2.3+3.8 => 6
2.3-3.8 => -1
-3.8 => -3
3.3*4 => 13
5.0/2 => 2
2.3f+3.8f => 6
2.3f+3.8 => 6
2.3f-3.8 => -1
-3.8f => -3
3.3f*4 => 13
5.0f/2 => 2
0.0/0.0 ==0.0/0.0 => 0
0.0/0.0 !=0.0/0.0 => 1
0.0/0.0 < 0 => 0
0.0/0.0 <= 0 => 0
0.0/0.0 > 0 => 0
0.0/0.0 >= 0 => 0
!3. => 0
!0. => 1
!3.f => 0
!0.f => 1
0.0 ? 3 : 5 => 5
1.2 ? 3 : 5 => 3
OK

stage2/test/function.exe
ret3() => 3
add2(3, 5) => 8
sub2(5, 3) => 2
add6(1,2,3,4,5,6) => 21
add6(1,2,add6(3,4,5,6,7,8),9,10,11) => 66
add6(1,2,add6(3,add6(4,5,6,7,8,9),10,11,12,13),14,15,16) => 136
add2(3,4) => 7
sub2(4,3) => 1
fib(9) => 55
({ sub_char(7, 3, 3); }) => 1
sub_long(7, 3, 3) => 1
sub_short(7, 3, 3) => 1
*g1_ptr() => 3
int_to_char(261) => 5
int_to_char(261) => 5
div_long(-10, 2) => -5
bool_fn_add(3) => 1
bool_fn_sub(3) => 0
bool_fn_add(-3) => 1
bool_fn_sub(-3) => 0
bool_fn_add(0) => 1
bool_fn_sub(0) => 1
static_fn() => 3
({ int x[2]; x[0]=3; param_decay(x); }) => 3
counter() => 2
counter() => 4
counter() => 6
true_fn() => 1
false_fn() => 0
char_fn() => 3
short_fn() => 5
add_all(3,1,2,3) => 6
add_all(4,1,2,3,-1) => 5
({ char buf[100]; sprintf(buf, "%d %d %s", 1, 2, "foo"); strcmp("1 2 foo", buf); }) => 0
1 2 foo
({ char buf[100]; fmt(buf, "%d %d %s", 1, 2, "foo"); strcmp("1 2 foo", buf); }) => 0
uchar_fn() => 251
ushort_fn() => 65528
schar_fn() => -5
sshort_fn() => -8
add_float(2.3,3.8) => 6
add_double(2.3,3.8) => 6
add_float3(2.5,2.5,2.5) => 7
add_double3(2.5,2.5,2.5) => 7
({ char buf[100]; sprintf(buf, "%.1f", (float)3.5); strcmp(buf, "3.5"); }) => 0
({ char buf[100]; fmt(buf, "%.1f", (float)3.5); strcmp(buf, "3.5"); }) => 0
(add2)(2,3) => 5
(&add2)(2,3) => 5
({ int (*fn)(int,int) = add2; fn(2,5); }) => 7
fnptr(add_all)(3, 1, 2, 3) => 6
param_decay2(ret3) => 3
sizeof(__func__) => 5
strcmp("main", __func__) => 0
strcmp("func_fn", func_fn()) => 0
strcmp("main", __FUNCTION__) => 0
strcmp("function_fn", function_fn()) => 0
OK

stage2/test/initializer.exe
({ int x[3]={1,2,3}; x[0]; }) => 1
({ int x[3]={1,2,3}; x[1]; }) => 2
({ int x[3]={1,2,3}; x[2]; }) => 3
({ int x[3]={1,2,3}; x[2]; }) => 3
({ int x[2][3]={{1,2,3},{4,5,6}}; x[0][1]; }) => 2
({ int x[2][3]={{1,2,3},{4,5,6}}; x[1][0]; }) => 4
({ int x[2][3]={{1,2,3},{4,5,6}}; x[1][2]; }) => 6
({ int x[3]={}; x[0]; }) => 0
({ int x[3]={}; x[1]; }) => 0
({ int x[3]={}; x[2]; }) => 0
({ int x[2][3]={{1,2}}; x[0][1]; }) => 2
({ int x[2][3]={{1,2}}; x[1][0]; }) => 0
({ int x[2][3]={{1,2}}; x[1][2]; }) => 0
({ char x[4]="abc"; x[0]; }) => 97
({ char x[4]="abc"; x[2]; }) => 99
({ char x[4]="abc"; x[3]; }) => 0
({ char x[2][4]={"abc","def"}; x[0][0]; }) => 97
({ char x[2][4]={"abc","def"}; x[0][3]; }) => 0
({ char x[2][4]={"abc","def"}; x[1][0]; }) => 100
({ char x[2][4]={"abc","def"}; x[1][2]; }) => 102
({ int x[]={1,2,3,4}; x[3]; }) => 4
({ int x[]={1,2,3,4}; sizeof(x); }) => 16
({ char x[]="foo"; sizeof(x); }) => 4
({ typedef char T[]; T x="foo"; T y="x"; sizeof(x); }) => 4
({ typedef char T[]; T x="foo"; T y="x"; sizeof(y); }) => 2
({ typedef char T[]; T x="x"; T y="foo"; sizeof(x); }) => 2
({ typedef char T[]; T x="x"; T y="foo"; sizeof(y); }) => 4
({ struct {int a; int b; int c;} x={1,2,3}; x.a; }) => 1
({ struct {int a; int b; int c;} x={1,2,3}; x.b; }) => 2
({ struct {int a; int b; int c;} x={1,2,3}; x.c; }) => 3
({ struct {int a; int b; int c;} x={1}; x.a; }) => 1
({ struct {int a; int b; int c;} x={1}; x.b; }) => 0
({ struct {int a; int b; int c;} x={1}; x.c; }) => 0
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[0].a; }) => 1
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[0].b; }) => 2
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[1].a; }) => 3
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[1].b; }) => 4
({ struct {int a; int b;} x[2]={{1,2}}; x[1].b; }) => 0
({ struct {int a; int b;} x={}; x.a; }) => 0
({ struct {int a; int b;} x={}; x.b; }) => 0
({ typedef struct {int a,b,c,d,e,f;} T; T x={1,2,3,4,5,6}; T y; y=x; y.e; }) => 5
({ typedef struct {int a,b;} T; T x={1,2}; T y, z; z=y=x; z.b; }) => 2
({ typedef struct {int a,b;} T; T x={1,2}; T y=x; y.a; }) => 1
({ union { int a; char b[4]; } x={0x01020304}; x.b[0]; }) => 4
({ union { int a; char b[4]; } x={0x01020304}; x.b[1]; }) => 3
({ union { struct { char a,b,c,d; } e; int f; } x={{4,3,2,1}}; x.f; }) => 16909060
g3 => 3
g4 => 4
g5 => 5
g6 => 6
g9[0] => 0
g9[1] => 1
g9[2] => 2
g11[0].a => 1
g11[0].b => 2
g11[1].a => 3
g11[1].b => 4
g12[0].a[0] => 1
g12[0].a[1] => 2
g12[1].a[0] => 0
g12[1].a[1] => 0
g13[0].b[0] => 4
g13[0].b[1] => 3
g13[1].b[0] => 8
g13[1].b[1] => 7
sizeof(g17) => 7
sizeof(g18) => 10
sizeof(g19) => 3
memcmp(g17, "foobar", 7) => 0
memcmp(g18, "foobar\0\0\0", 10) => 0
memcmp(g19, "foo", 3) => 0
strcmp(g20, "foobar") => 0
strcmp(g21, "bar") => 0
strcmp(g22+3, "foobar") => 0
strcmp(g23[0], "foobar") => 0
strcmp(g23[1], "bar") => 0
strcmp(g23[2]+3, "foobar") => 0
g24 => 3
*g25 => 3
*g27 => 2
*g28 => 3
*(int *)g29 => 1
g31[0] => 1
g31[1] => 2
g31[2] => 3
g40[0].a[0] => 1
g40[0].a[1] => 2
g40[1].a[0] => 3
g40[1].a[1] => 4
g41[0].a[0] => 1
g41[0].a[1] => 2
g41[1].a[0] => 3
g41[1].a[1] => 4
({ int x[2][3]={0,1,2,3,4,5}; x[0][0]; }) => 0
({ int x[2][3]={0,1,2,3,4,5}; x[1][0]; }) => 3
({ struct {int a; int b;} x[2]={0,1,2,3}; x[0].a; }) => 0
({ struct {int a; int b;} x[2]={0,1,2,3}; x[1].a; }) => 2
strcmp(g43[0], "foo") => 0
strcmp(g43[1], "bar") => 0
strcmp(g44, "foo") => 0
({ int a[]={1,2,3,}; a[2]; }) => 3
({ struct {int a,b,c;} x={1,2,3,}; x.a; }) => 1
({ union {int a; char b;} x={1,}; x.a; }) => 1
({ enum {x,y,z,}; z; }) => 2
sizeof(g60) => 3
sizeof(g61) => 6
sizeof(g65) => 4
sizeof(g66) => 7
strcmp(g65.b, "oo") => 0
strcmp(g66.b, "oobar") => 0
OK

stage2/test/literal.exe
'a' => 97
'\n' => 10
'\x80' => -128
0777 => 511
0x0 => 0
0xa => 10
0XA => 10
0xbeef => 48879
0xBEEF => 48879
0XBEEF => 48879
0b0 => 0
0b1 => 1
0b101111 => 47
0B101111 => 47
sizeof(0) => 4
sizeof(0L) => 8
sizeof(0LU) => 8
sizeof(0UL) => 8
sizeof(0LL) => 8
sizeof(0LLU) => 8
sizeof(0Ull) => 8
sizeof(0l) => 8
sizeof(0ll) => 8
sizeof(0x0L) => 8
sizeof(0b0L) => 8
sizeof(2147483647) => 4
sizeof(2147483648) => 8
0xffffffffffffffff => -1
sizeof(0xffffffffffffffff) => 8
sizeof(4294967295U) => 4
sizeof(4294967296U) => 8
-1U>>30 => 3
-1Ul>>62 => 3
-1ull>>62 => 3
0xffffffffffffffffl>>63 => 1
0xffffffffffffffffll>>63 => 1
18446744073709551615 => -1
sizeof(18446744073709551615) => 8
18446744073709551615>>63 => -1
0xffffffffffffffff => -1
sizeof(0xffffffffffffffff) => 8
0xffffffffffffffff>>63 => 1
01777777777777777777777 => -1
sizeof(01777777777777777777777) => 8
01777777777777777777777>>63 => 1
0b1111111111111111111111111111111111111111111111111111111111111111 => -1
sizeof(0b1111111111111111111111111111111111111111111111111111111111111111) => 8
0b1111111111111111111111111111111111111111111111111111111111111111>>63 => 1
sizeof(2147483648) => 8
sizeof(2147483647) => 4
sizeof(0x1ffffffff) => 8
sizeof(0xffffffff) => 4
0xffffffff>>31 => 1
sizeof(040000000000) => 8
sizeof(037777777777) => 4
037777777777>>31 => 1
sizeof(0b111111111111111111111111111111111) => 8
sizeof(0b11111111111111111111111111111111) => 4
0b11111111111111111111111111111111>>31 => 1
1 << 31 >> 31 => -1
01 << 31 >> 31 => -1
0x1 << 31 >> 31 => -1
0b1 << 31 >> 31 => -1
sizeof(8f) => 4
sizeof(0.3F) => 4
sizeof(0.) => 8
sizeof(.0) => 8
sizeof(5.l) => 8
sizeof(2.0L) => 8
sizeof(char) => 1
sizeof(L'\0') => 4
L'a' => 97
OK

stage2/test/macro.exe
include1 => 5
include2 => 7
m => 5
m => 3
m => 3
m => 2
m => 2
m => 3
m => 1
m => 2
M1 => 3
M1 => 4
M1 5 => 12
M1*5 => 23
5 => 5
m => 5
m => 5
M2 => 9
M3 => 12
M4 => 13
m => 3
m => 5
m => 3
m => 5
M7() => 1
M7 => 5
ret3 () => 3
M8(3, 4) => 7
M8(3+4, 4+5) => 24
M8(3+4, 4+5) => 63
M8(, 4+5) => 9
M8((2+3), 4) => 20
M8((2,3), 4) => 12
dbl(2) => 10
M11( a!b `""c)[0] => 97
M11( a!b `""c)[1] => 33
M11( a!b `""c)[2] => 98
M11( a!b `""c)[3] => 32
M11( a!b `""c)[4] => 96
M11( a!b `""c)[5] => 34
M11( a!b `""c)[6] => 34
M11( a!b `""c)[7] => 99
M11( a!b `""c)[8] => 0
paste(1,5) => 15
paste(0,xff) => 255
({ int foobar=3; foobar; }) => 3
paste(5,) => 5
paste(,5) => 5
({ int i3=100; 1+i3; }) => 101
paste2(1+2) => 26
paste3(1+2) => 23
paste4(1,2,3) => 123
m => 3
m => 3
m => 4
m => 4
m => 5
strcmp("foo.bar", "foo.bar") => 0
strcmp("foo. bar", "foo. bar") => 0
strcmp("bar.foo", "bar.foo") => 0
strcmp("bar. foo", "bar. foo") => 0
foo => 3
foo => 4
foo => 3
foo => 4
__STDC__ => 1
strcmp(main_filename1, "test/macro.c") => 0
main_line1 => 5
main_line2 => 7
strcmp(include1_filename, "test/include1.h") => 0
include1_line => 4
M14() => 3
M14() 2 => 2
M14(5) => 5
M14(2, 6) => 8
M14(3,4,5) => 21
M14(3,4,5) => 21
M14(5) => 5
OK

stage2/test/pointer.exe
({ int x=3; *&x; }) => 3
({ int x=3; int *y=&x; int **z=&y; **z; }) => 3
({ int x=3; int y=5; *(&x+1); }) => 5
({ int x=3; int y=5; *(&y-1); }) => 3
({ int x=3; int y=5; *(&x-(-1)); }) => 5
({ int x=3; int *y=&x; *y=5; x; }) => 5
({ int x=3; int y=5; *(&x+1)=7; y; }) => 7
({ int x=3; int y=5; *(&y-2+1)=7; x; }) => 7
({ int x=3; (&x+2)-&x+3; }) => 5
({ int x, y; x=3; y=5; x+y; }) => 8
({ int x=3, y=5; x+y; }) => 8
({ int x[2]; int *y=&x; *y=3; *x; }) => 3
({ int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *x; }) => 3
({ int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+1); }) => 4
({ int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+2); }) => 5
({ int x[2][3]; int *y=x; *y=0; **x; }) => 0
({ int x[2][3]; int *y=x; *(y+1)=1; *(*x+1); }) => 1
({ int x[2][3]; int *y=x; *(y+2)=2; *(*x+2); }) => 2
({ int x[2][3]; int *y=x; *(y+3)=3; **(x+1); }) => 3
({ int x[2][3]; int *y=x; *(y+4)=4; *(*(x+1)+1); }) => 4
({ int x[2][3]; int *y=x; *(y+5)=5; *(*(x+1)+2); }) => 5
({ int x[3]; *x=3; x[1]=4; x[2]=5; *x; }) => 3
({ int x[3]; *x=3; x[1]=4; x[2]=5; *(x+1); }) => 4
({ int x[3]; *x=3; x[1]=4; x[2]=5; *(x+2); }) => 5
({ int x[3]; *x=3; x[1]=4; x[2]=5; *(x+2); }) => 5
({ int x[3]; *x=3; x[1]=4; 2[x]=5; *(x+2); }) => 5
({ int x[2][3]; int *y=x; y[0]=0; x[0][0]; }) => 0
({ int x[2][3]; int *y=x; y[1]=1; x[0][1]; }) => 1
({ int x[2][3]; int *y=x; y[2]=2; x[0][2]; }) => 2
({ int x[2][3]; int *y=x; y[3]=3; x[1][0]; }) => 3
({ int x[2][3]; int *y=x; y[4]=4; x[1][1]; }) => 4
({ int x[2][3]; int *y=x; y[5]=5; x[1][2]; }) => 5
OK

stage2/test/sizeof.exe
sizeof(char) => 1
sizeof(short) => 2
sizeof(short int) => 2
sizeof(int short) => 2
sizeof(int) => 4
sizeof(long) => 8
sizeof(long int) => 8
sizeof(long int) => 8
sizeof(char *) => 8
sizeof(int *) => 8
sizeof(long *) => 8
sizeof(int **) => 8
sizeof(int(*)[4]) => 8
sizeof(int*[4]) => 32
sizeof(int[4]) => 16
sizeof(int[3][4]) => 48
sizeof(struct {int a; int b;}) => 8
sizeof(-10 + (long)5) => 8
sizeof(-10 - (long)5) => 8
sizeof(-10 * (long)5) => 8
sizeof(-10 / (long)5) => 8
sizeof((long)-10 + 5) => 8
sizeof((long)-10 - 5) => 8
sizeof((long)-10 * 5) => 8
sizeof((long)-10 / 5) => 8
({ char i; sizeof(++i); }) => 1
sizeof(int(*)[10]) => 8
sizeof(int(*)[][10]) => 8
sizeof(struct { int x, y[]; }) => 4
sizeof(char) => 1
sizeof(signed char) => 1
sizeof(signed char signed) => 1
sizeof(unsigned char) => 1
sizeof(unsigned char unsigned) => 1
sizeof(short) => 2
sizeof(int short) => 2
sizeof(short int) => 2
sizeof(signed short) => 2
sizeof(int short signed) => 2
sizeof(unsigned short) => 2
sizeof(int short unsigned) => 2
sizeof(int) => 4
sizeof(signed int) => 4
sizeof(signed) => 4
sizeof(signed signed) => 4
sizeof(unsigned int) => 4
sizeof(unsigned) => 4
sizeof(unsigned unsigned) => 4
sizeof(long) => 8
sizeof(signed long) => 8
sizeof(signed long int) => 8
sizeof(unsigned long) => 8
sizeof(unsigned long int) => 8
sizeof(long long) => 8
sizeof(signed long long) => 8
sizeof(signed long long int) => 8
sizeof(unsigned long long) => 8
sizeof(unsigned long long int) => 8
sizeof((char)1) => 1
sizeof((short)1) => 2
sizeof((int)1) => 4
sizeof((long)1) => 8
sizeof((char)1 + (char)1) => 4
sizeof((short)1 + (short)1) => 4
sizeof(1?2:3) => 4
sizeof(1?(short)2:(char)3) => 4
sizeof(1?(long)2:(char)3) => 8
sizeof(char) << 31 >> 31 => 1
sizeof(char) << 63 >> 63 => 1
sizeof(float) => 4
sizeof(double) => 8
sizeof(1f+2) => 4
sizeof(1.0+2) => 8
sizeof(1f-2) => 4
sizeof(1.0-2) => 8
sizeof(1f*2) => 4
sizeof(1.0*2) => 8
sizeof(1f/2) => 4
sizeof(1.0/2) => 8
sizeof(long double) => 8
OK

stage2/test/stdhdr.exe
OK

stage2/test/string.exe
""[0] => 0
sizeof("") => 1
"abc"[0] => 97
"abc"[1] => 98
"abc"[2] => 99
"abc"[3] => 0
sizeof("abc") => 4
"\a"[0] => 7
"\b"[0] => 8
"\t"[0] => 9
"\n"[0] => 10
"\v"[0] => 11
"\f"[0] => 12
"\r"[0] => 13
"\e"[0] => 27
"\j"[0] => 106
"\k"[0] => 107
"\l"[0] => 108
"\ax\ny"[0] => 7
"\ax\ny"[1] => 120
"\ax\ny"[2] => 10
"\ax\ny"[3] => 121
"\0"[0] => 0
"\20"[0] => 16
"\101"[0] => 65
"\1500"[0] => 104
"\x00"[0] => 0
"\x77"[0] => 119
sizeof("abc" "def") => 7
sizeof("abc" "d" "efgh") => 9
strcmp("abc" "d" "\nefgh", "abcd\nefgh") => 0
!strcmp("abc" "d", "abcd\nefgh") => 0
strcmp("\x9" "0", "\t0") => 0
OK

stage2/test/struct.exe
({ struct {int a; int b;} x; x.a=1; x.b=2; x.a; }) => 1
({ struct {int a; int b;} x; x.a=1; x.b=2; x.b; }) => 2
({ struct {char a; int b; char c;} x; x.a=1; x.b=2; x.c=3; x.a; }) => 1
({ struct {char a; int b; char c;} x; x.b=1; x.b=2; x.c=3; x.b; }) => 2
({ struct {char a; int b; char c;} x; x.a=1; x.b=2; x.c=3; x.c; }) => 3
({ struct {char a; char b;} x[3]; char *p=x; p[0]=0; x[0].a; }) => 0
({ struct {char a; char b;} x[3]; char *p=x; p[1]=1; x[0].b; }) => 1
({ struct {char a; char b;} x[3]; char *p=x; p[2]=2; x[1].a; }) => 2
({ struct {char a; char b;} x[3]; char *p=x; p[3]=3; x[1].b; }) => 3
({ struct {char a[3]; char b[5];} x; char *p=&x; x.a[0]=6; p[0]; }) => 6
({ struct {char a[3]; char b[5];} x; char *p=&x; x.b[0]=7; p[3]; }) => 7
({ struct { struct { char b; } a; } x; x.a.b=6; x.a.b; }) => 6
({ struct {int a;} x; sizeof(x); }) => 4
({ struct {int a; int b;} x; sizeof(x); }) => 8
({ struct {int a, b;} x; sizeof(x); }) => 8
({ struct {int a[3];} x; sizeof(x); }) => 12
({ struct {int a;} x[4]; sizeof(x); }) => 16
({ struct {int a[3];} x[2]; sizeof(x); }) => 24
({ struct {char a; char b;} x; sizeof(x); }) => 2
({ struct {} x; sizeof(x); }) => 0
({ struct {char a; int b;} x; sizeof(x); }) => 8
({ struct {int a; char b;} x; sizeof(x); }) => 8
({ struct t {int a; int b;} x; struct t y; sizeof(y); }) => 8
({ struct t {int a; int b;}; struct t y; sizeof(y); }) => 8
({ struct t {char a[2];}; { struct t {char a[4];}; } struct t y; sizeof(y); }) => 2
({ struct t {int x;}; int t=1; struct t y; y.x=2; t+y.x; }) => 3
({ struct t {char a;} x; struct t *y = &x; x.a=3; y->a; }) => 3
({ struct t {char a;} x; struct t *y = &x; y->a=3; x.a; }) => 3
({ struct {int a,b;} x,y; x.a=3; y=x; y.a; }) => 3
({ struct t {int a,b;}; struct t x; x.a=7; struct t y; struct t *z=&y; *z=x; y.a; }) => 7
({ struct t {int a,b;}; struct t x; x.a=7; struct t y, *p=&x, *q=&y; *q=*p; y.a; }) => 7
({ struct t {char a, b;} x, y; x.a=5; y=x; y.a; }) => 5
({ struct t {int a; int b;} x; struct t y; sizeof(y); }) => 8
({ struct t {int a; int b;}; struct t y; sizeof(y); }) => 8
({ struct {char a; long b;} x; sizeof(x); }) => 16
({ struct {char a; short b;} x; sizeof(x); }) => 4
({ struct foo *bar; sizeof(bar); }) => 8
({ struct T *foo; struct T {int x;}; sizeof(struct T); }) => 4
({ struct T { struct T *next; int x; } a; struct T b; b.x=1; a.next=&b; a.next->x; }) => 1
({ typedef struct T T; struct T { int x; }; sizeof(T); }) => 4
OK

stage2/test/typedef.exe
({ typedef int t; t x=1; x; }) => 1
({ typedef struct {int a;} t; t x; x.a=1; x.a; }) => 1
({ typedef int t; t t=1; t; }) => 1
({ typedef struct {int a;} t; { typedef int t; } t x; x.a=2; x.a; }) => 2
({ typedef t; t x; sizeof(x); }) => 4
({ MyInt x=3; x; }) => 3
({ MyInt2 x; sizeof(x); }) => 16
OK

stage2/test/union.exe
({ union { int a; char b[6]; } x; sizeof(x); }) => 8
({ union { int a; char b[4]; } x; x.a = 515; x.b[0]; }) => 3
({ union { int a; char b[4]; } x; x.a = 515; x.b[1]; }) => 2
({ union { int a; char b[4]; } x; x.a = 515; x.b[2]; }) => 0
({ union { int a; char b[4]; } x; x.a = 515; x.b[3]; }) => 0
({ union {int a,b;} x,y; x.a=3; y.a=5; y=x; y.a; }) => 3
({ union {struct {int a,b;} c;} x,y; x.c.b=3; y.c.b=5; y=x; y.c.b; }) => 3
OK

stage2/test/usualconv.exe
-10 + (long)5 => -5
-10 - (long)5 => -15
-10 * (long)5 => -50
-10 / (long)5 => -2
-2 < (long)-1 => 1
-2 <= (long)-1 => 1
-2 > (long)-1 => 0
-2 >= (long)-1 => 0
(long)-2 < -1 => 1
(long)-2 <= -1 => 1
(long)-2 > -1 => 0
(long)-2 >= -1 => 0
2147483647 + 2147483647 + 2 => 0
({ long x; x=-1; x; }) => -1
({ char x[3]; x[0]=0; x[1]=1; x[2]=2; char *y=x+1; y[0]; }) => 1
({ char x[3]; x[0]=0; x[1]=1; x[2]=2; char *y=x+1; y[-1]; }) => 0
({ struct t {char a;} x, y; x.a=5; y=x; y.a; }) => 5
(1 ? ret10 : (void *)0)() => 10
OK

stage2/test/varargs.exe
sum1(1, 2, 3, 0) => 6
sum2(1,2.0, 3,4.0, 5,6.0, 0) => 21
OK

stage2/test/variable.exe
({ int a; a=3; a; }) => 3
({ int a=3; a; }) => 3
({ int a=3; int z=5; a+z; }) => 8
({ int a=3; a; }) => 3
({ int a=3; int z=5; a+z; }) => 8
({ int a; int b; a=b=3; a+b; }) => 6
({ int foo=3; foo; }) => 3
({ int foo123=3; int bar=5; foo123+bar; }) => 8
({ int x; sizeof(x); }) => 4
({ int x; sizeof x; }) => 4
({ int *x; sizeof(x); }) => 8
({ int x[4]; sizeof(x); }) => 16
({ int x[3][4]; sizeof(x); }) => 48
({ int x[3][4]; sizeof(*x); }) => 16
({ int x[3][4]; sizeof(**x); }) => 4
({ int x[3][4]; sizeof(**x) + 1; }) => 5
({ int x[3][4]; sizeof **x + 1; }) => 5
({ int x[3][4]; sizeof(**x + 1); }) => 4
({ int x=1; sizeof(x=2); }) => 4
({ int x=1; sizeof(x=2); x; }) => 1
g1 => 0
({ g1=3; g1; }) => 3
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[0]; }) => 0
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[1]; }) => 1
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[2]; }) => 2
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[3]; }) => 3
sizeof(g1) => 4
sizeof(g2) => 16
({ char x=1; x; }) => 1
({ char x=1; char y=2; x; }) => 1
({ char x=1; char y=2; y; }) => 2
({ char x; sizeof(x); }) => 1
({ char x[10]; sizeof(x); }) => 10
({ int x=2; { int x=3; } x; }) => 2
({ int x=2; { int x=3; } int y=4; x; }) => 2
({ int x=2; { x=3; } x; }) => 3
({ int x; int y; char z; char *a=&y; char *b=&z; b-a; }) => 7
({ int x; char y; int z; char *a=&y; char *b=&z; b-a; }) => 1
({ long x; sizeof(x); }) => 8
({ short x; sizeof(x); }) => 2
({ char *x[3]; sizeof(x); }) => 24
({ char (*x)[3]; sizeof(x); }) => 8
({ char (x); sizeof(x); }) => 1
({ char (x)[3]; sizeof(x); }) => 3
({ char (x[3])[4]; sizeof(x); }) => 12
({ char (x[3])[4]; sizeof(x[0]); }) => 4
({ char *x[3]; char y; x[0]=&y; y=3; x[0][0]; }) => 3
({ char x[3]; char (*y)[3]=x; y[0][0]=4; y[0][0]; }) => 4
g3 => 3
OK

test/driver.sh ./stage2/chibicc
testing -o ... passed
testing --help ... passed
testing -march=x64 ... passed
testing -march=riscv ... passed
testing -S ... passed
testing default output file ... passed
testing default output file ... passed
testing multiple input files ... passed
testing multiple input files ... passed
testing linker ... passed
testing linker ... passed
testing a.out ... passed
testing -E ... passed
testing -E and -o ... passed
testing -I ... passed
OK
make[1]: Leaving directory '/home/corco/github.com/daily/cike/chibicc/c197'
make test ARCH=riscv
make[1]: Entering directory '/home/corco/github.com/daily/cike/chibicc/c197'
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/alignof.o test/alignof.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/alignof.exe test/riscv/alignof.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/arith.o test/arith.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/arith.exe test/riscv/arith.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/cast.o test/cast.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/cast.exe test/riscv/cast.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/compat.o test/compat.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/compat.exe test/riscv/compat.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/complit.o test/complit.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/complit.exe test/riscv/complit.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/const.o test/const.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/const.exe test/riscv/const.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/constexpr.o test/constexpr.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/constexpr.exe test/riscv/constexpr.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/control.o test/control.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/control.exe test/riscv/control.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/decl.o test/decl.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/decl.exe test/riscv/decl.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/enum.o test/enum.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/enum.exe test/riscv/enum.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/extern.o test/extern.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/extern.exe test/riscv/extern.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/float.o test/float.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/float.exe test/riscv/float.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/function.o test/function.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/function.exe test/riscv/function.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/initializer.o test/initializer.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/initializer.exe test/riscv/initializer.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/literal.o test/literal.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/literal.exe test/riscv/literal.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/macro.o test/macro.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/macro.exe test/riscv/macro.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/pointer.o test/pointer.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/pointer.exe test/riscv/pointer.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/sizeof.o test/sizeof.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/sizeof.exe test/riscv/sizeof.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/stdhdr.o test/stdhdr.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/stdhdr.exe test/riscv/stdhdr.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/string.o test/string.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/string.exe test/riscv/string.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/struct.o test/struct.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/struct.exe test/riscv/struct.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/typedef.o test/typedef.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/typedef.exe test/riscv/typedef.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/union.o test/union.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/union.exe test/riscv/union.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/usualconv.o test/usualconv.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/usualconv.exe test/riscv/usualconv.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/varargs.o test/varargs.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/varargs.exe test/riscv/varargs.o -xc test/common
mkdir -p test/riscv
./chibicc -march=riscv -Iinclude2 -Itest -c -o test/riscv/variable.o test/variable.c
riscv64-unknown-linux-gnu-gcc -static -o test/riscv/variable.exe test/riscv/variable.o -xc test/common
for i in test/riscv/alignof.exe test/riscv/arith.exe test/riscv/cast.exe test/riscv/compat.exe test/riscv/complit.exe test/riscv/const.exe test/riscv/constexpr.exe test/riscv/control.exe test/riscv/decl.exe test/riscv/enum.exe test/riscv/extern.exe test/riscv/float.exe test/riscv/function.exe test/riscv/initializer.exe test/riscv/literal.exe test/riscv/macro.exe test/riscv/pointer.exe test/riscv/sizeof.exe test/riscv/stdhdr.exe test/riscv/string.exe test/riscv/struct.exe test/riscv/typedef.exe test/riscv/union.exe test/riscv/usualconv.exe test/riscv/varargs.exe test/riscv/variable.exe; do echo $i; /bin/qemu-riscv64 -L /sysroot ./$i || exit 1; echo; done
test/riscv/alignof.exe
_Alignof(char) => 1
_Alignof(short) => 2
_Alignof(int) => 4
_Alignof(long) => 8
_Alignof(long long) => 8
_Alignof(char[3]) => 1
_Alignof(int[3]) => 4
_Alignof(struct {char a; char b;}[2]) => 1
_Alignof(struct {char a; long b;}[2]) => 8
({ _Alignas(char) char x, y; &y-&x; }) => 1
({ _Alignas(long) char x, y; &y-&x; }) => 8
({ _Alignas(32) char x, y; &y-&x; }) => 32
({ _Alignas(32) int *x, *y; ((char *)&y)-((char *)&x); }) => 32
({ struct { _Alignas(16) char x, y; } a; &a.y-&a.x; }) => 16
({ struct T { _Alignas(8) char a; }; _Alignof(struct T); }) => 8
(long)(char *)&g1 % 512 => 0
(long)(char *)&g2 % 512 => 0
(long)(char *)&g4 % 4 => 0
(long)(char *)&g5 % 8 => 0
({ char x; _Alignof(x); }) => 1
({ int x; _Alignof(x); }) => 4
({ char x; _Alignof x; }) => 1
({ int x; _Alignof x; }) => 4
_Alignof(char) << 31 >> 31 => 1
_Alignof(char) << 63 >> 63 => 1
({ char x; _Alignof(x) << 63 >> 63; }) => 1
OK

test/riscv/arith.exe
0 => 0
42 => 42
5+20-4 => 21
12 + 34 - 5 => 41
5+6*7 => 47
5*(9-6) => 15
(3+5)/2 => 4
-10+20 => 10
- -10 => 10
- - +10 => 10
0==1 => 0
42==42 => 1
0!=1 => 1
42!=42 => 0
0<1 => 1
1<1 => 0
2<1 => 0
0<=1 => 1
1<=1 => 1
2<=1 => 0
1>0 => 1
1>1 => 0
1>2 => 0
1>=0 => 1
1>=1 => 1
1>=2 => 0
1073741824 * 100 / 100 => 0
({ int i=2; i+=5; i; }) => 7
({ int i=2; i+=5; }) => 7
({ int i=5; i-=2; i; }) => 3
({ int i=5; i-=2; }) => 3
({ int i=3; i*=2; i; }) => 6
({ int i=3; i*=2; }) => 6
({ int i=6; i/=2; i; }) => 3
({ int i=6; i/=2; }) => 3
({ int i=2; ++i; }) => 3
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; ++*p; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; --*p; }) => 0
({ int i=2; i++; }) => 2
({ int i=2; i--; }) => 2
({ int i=2; i++; i; }) => 3
({ int i=2; i--; i; }) => 1
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p++; }) => 1
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p--; }) => 1
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[0]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*(p--))--; a[1]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p)--; a[2]; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p)--; p++; *p; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[0]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[1]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[2]; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; *p; }) => 2
!1 => 0
!2 => 0
!0 => 1
!(char)0 => 1
!(long)3 => 0
sizeof(!(char)0) => 4
sizeof(!(long)0) => 4
~0 => -1
~-1 => 0
17%6 => 5
((long)17)%6 => 5
({ int i=10; i%=4; i; }) => 2
({ long i=10; i%=4; i; }) => 2
0&1 => 0
3&1 => 1
7&3 => 3
-1&10 => 10
0|1 => 1
0b10000|0b00011 => 19
0^0 => 0
0b1111^0b1111 => 0
0b111000^0b001100 => 52
({ int i=6; i&=3; i; }) => 2
({ int i=6; i|=3; i; }) => 7
({ int i=15; i^=5; i; }) => 10
0?1:2 => 2
1?1:2 => 1
0?-2:-1 => -1
1?-2:-1 => -2
sizeof(0?1:2) => 4
sizeof(0?(long)1:(long)2) => 8
0?(long)-2:-1 => -1
0?-2:(long)-1 => -1
1?(long)-2:-1 => -2
1?-2:(long)-1 => -2
({ int x; int *p=&x; p+20-p; }) => 20
({ int x; int *p=&x; p+20-p>0; }) => 1
({ int x; int *p=&x; p-20-p; }) => -20
({ int x; int *p=&x; p-20-p<0; }) => 1
(char *)0xffffffffffffffff - (char *)0xfffffffffffffff0 => 15
(char *)0xfffffffffffffff0 - (char *)0xffffffffffffffff => -15
(void *)0xffffffffffffffff > (void *)0 => 1
OK

test/riscv/cast.exe
(int)8590066177 => 131585
(short)8590066177 => 513
(char)8590066177 => 1
(long)1 => 1
(long)&*(int *)0 => 0
({ int x=512; *(char *)&x=1; x; }) => 513
({ int x=5; long y=(long)&x; *(int*)y; }) => 5
(char)255 => -1
(signed char)255 => -1
(unsigned char)255 => 255
(short)65535 => -1
(unsigned short)65535 => 65535
(int)0xffffffff => -1
(unsigned)0xffffffff => -1
-1<1 => 1
-1<(unsigned)1 => 0
(char)127+(char)127 => 254
(short)32767+(short)32767 => 65534
-1>>1 => -1
(unsigned long)-1 => -1
((unsigned)-1)>>1 => 2147483647
(-100)/2 => -50
((unsigned)-100)/2 => 2147483598
((unsigned long)-100)/2 => -50
((long)-1)/(unsigned)100 => 0
(-100)%7 => -2
((unsigned)-100)%7 => 2
((unsigned long)-100)%9 => 6
(int)(unsigned short)65535 => 65535
({ unsigned short x = 65535; x; }) => 65535
({ unsigned short x = 65535; (int)x; }) => 65535
({ typedef short T; T x = 65535; (int)x; }) => -1
({ typedef unsigned short T; T x = 65535; (int)x; }) => 65535
(_Bool)0.0 => 0
(_Bool)0.1 => 1
(char)3.0 => 3
(short)1000.3 => 1000
(int)3.99 => 3
(long)2e15 => 1233977344
(float)3.5 => 3
(double)(float)5.5 => 5
(float)3 => 3
(double)3 => 3
(float)3L => 3
(double)3L => 3
OK

test/riscv/compat.exe
OK

test/riscv/complit.exe
(int){1} => 1
((int[]){0,1,2})[2] => 2
((struct {char a; int b;}){'a', 3}).a => 97
({ int x=3; (int){x}; }) => 3
tree->val => 1
tree->lhs->val => 2
tree->lhs->lhs->val => 3
tree->lhs->rhs->val => 4
OK

test/riscv/const.exe
({ const x = 5; x; }) => 5
({ const x = 8; int *const y=&x; *y; }) => 8
({ const x = 6; *(const * const)&x; }) => 6
OK

test/riscv/constexpr.exe
({ enum { ten=1+2+3+4 }; ten; }) => 10
({ int i=0; switch(3) { case 5-2+0*3: i++; } i; }) => 1
({ int x[1+1]; sizeof(x); }) => 8
({ char x[8-2]; sizeof(x); }) => 6
({ char x[2*3]; sizeof(x); }) => 6
({ char x[12/4]; sizeof(x); }) => 3
({ char x[12%10]; sizeof(x); }) => 2
({ char x[0b110&0b101]; sizeof(x); }) => 4
({ char x[0b110|0b101]; sizeof(x); }) => 7
({ char x[0b111^0b001]; sizeof(x); }) => 6
({ char x[1<<2]; sizeof(x); }) => 4
({ char x[4>>1]; sizeof(x); }) => 2
({ char x[(1==1)+1]; sizeof(x); }) => 2
({ char x[(1!=1)+1]; sizeof(x); }) => 1
({ char x[(1<1)+1]; sizeof(x); }) => 1
({ char x[(1<=1)+1]; sizeof(x); }) => 2
({ char x[1?2:3]; sizeof(x); }) => 2
({ char x[0?2:3]; sizeof(x); }) => 3
({ char x[(1,3)]; sizeof(x); }) => 3
({ char x[!0+1]; sizeof(x); }) => 2
({ char x[!1+1]; sizeof(x); }) => 1
({ char x[~-3]; sizeof(x); }) => 2
({ char x[(5||6)+1]; sizeof(x); }) => 2
({ char x[(0||0)+1]; sizeof(x); }) => 1
({ char x[(1&&1)+1]; sizeof(x); }) => 2
({ char x[(1&&0)+1]; sizeof(x); }) => 1
({ char x[(int)3]; sizeof(x); }) => 3
({ char x[(char)0xffffff0f]; sizeof(x); }) => 15
({ char x[(short)0xffff010f]; sizeof(x); }) => 271
({ char x[(int)0xfffffffffff+5]; sizeof(x); }) => 4
({ char x[(int*)0+2]; sizeof(x); }) => 8
({ char x[(int*)16-1]; sizeof(x); }) => 12
({ char x[(int*)16-(int*)4]; sizeof(x); }) => 3
({ char x[(-1>>31)+5]; sizeof(x); }) => 4
({ char x[(unsigned char)0xffffffff]; sizeof(x); }) => 255
({ char x[(unsigned short)0xffff800f]; sizeof(x); }) => 32783
({ char x[(unsigned int)0xfffffffffff>>31]; sizeof(x); }) => 1
({ char x[(long)-1/((long)1<<62)+1]; sizeof(x); }) => 1
({ char x[(unsigned long)-1/((long)1<<62)+1]; sizeof(x); }) => 4
({ char x[(unsigned)1<-1]; sizeof(x); }) => 1
({ char x[(unsigned)1<=-1]; sizeof(x); }) => 1
g40==1.5 => 1
g41==11 => 1
OK

test/riscv/control.exe
({ int x; if (0) x=2; else x=3; x; }) => 3
({ int x; if (1-1) x=2; else x=3; x; }) => 3
({ int x; if (1) x=2; else x=3; x; }) => 2
({ int x; if (2-1) x=2; else x=3; x; }) => 2
({ int i=0; int j=0; for (i=0; i<=10; i=i+1) j=i+j; j; }) => 55
({ int i=0; while(i<10) i=i+1; i; }) => 10
({ 1; {2;} 3; }) => 3
({ ;;; 5; }) => 5
({ int i=0; while(i<10) i=i+1; i; }) => 10
({ int i=0; int j=0; while(i<=10) {j=i+j; i=i+1;} j; }) => 55
(1,2,3) => 3
({ int i=2, j=3; (i=5,j)=6; i; }) => 5
({ int i=2, j=3; (i=5,j)=6; j; }) => 6
({ int j=0; for (int i=0; i<=10; i=i+1) j=j+i; j; }) => 55
({ int i=3; int j=0; for (int i=0; i<=10; i=i+1) j=j+i; i; }) => 3
0||1 => 1
0||(2-2)||5 => 1
0||0 => 0
0||(2-2) => 0
0&&1 => 0
(2-2)&&5 => 0
1&&5 => 1
({ int i=0; goto a; a: i++; b: i++; c: i++; i; }) => 3
({ int i=0; goto e; d: i++; e: i++; f: i++; i; }) => 2
({ int i=0; goto i; g: i++; h: i++; i: i++; i; }) => 1
({ typedef int foo; goto foo; foo:; 1; }) => 1
({ int i=0; for(;i<10;i++) { if (i == 3) break; } i; }) => 3
({ int i=0; while (1) { if (i++ == 3) break; } i; }) => 4
({ int i=0; for(;i<10;i++) { for (;;) break; if (i == 3) break; } i; }) => 3
({ int i=0; while (1) { while(1) break; if (i++ == 3) break; } i; }) => 4
({ int i=0; int j=0; for (;i<10;i++) { if (i>5) continue; j++; } i; }) => 10
({ int i=0; int j=0; for (;i<10;i++) { if (i>5) continue; j++; } j; }) => 6
({ int i=0; int j=0; for(;!i;) { for (;j!=10;j++) continue; break; } j; }) => 10
({ int i=0; int j=0; while (i++<10) { if (i>5) continue; j++; } i; }) => 11
({ int i=0; int j=0; while (i++<10) { if (i>5) continue; j++; } j; }) => 5
({ int i=0; int j=0; while(!i) { while (j++!=10) continue; break; } j; }) => 11
({ int i=0; switch(0) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 5
({ int i=0; switch(1) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 6
({ int i=0; switch(2) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 7
({ int i=0; switch(3) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 0
({ int i=0; switch(0) { case 0:i=5;break; default:i=7; } i; }) => 5
({ int i=0; switch(1) { case 0:i=5;break; default:i=7; } i; }) => 7
({ int i=0; switch(1) { case 0: 0; case 1: 0; case 2: 0; i=2; } i; }) => 2
({ int i=0; switch(3) { case 0: 0; case 1: 0; case 2: 0; i=2; } i; }) => 0
({ int i=0; switch(-1) { case 0xffffffff: i=3; break; } i; }) => 3
({ int i=0; int j=0; do { j++; } while (i++ < 6); j; }) => 7
({ int i=0; int j=0; int k=0; do { if (++j > 3) break; continue; k++; } while (1); j; }) => 4
0.0 &&0.0 => 0
0.0 &&0.1 => 0
0.3 &&0.0 => 0
0.3 &&0.5 => 1
0.0 ||0.0 => 0
0.0 ||0.1 => 1
0.3 ||0.0 => 1
0.3 ||0.5 => 1
({ int x; if (0.0) x=3; else x=5; x; }) => 5
({ int x; if (0.1) x=3; else x=5; x; }) => 3
({ int x=5; if (0.0) x=3; x; }) => 5
({ int x=5; if (0.1) x=3; x; }) => 3
({ double i=10.0; int j=0; for (; i; i--, j++); j; }) => 10
({ double i=10.0; int j=0; do j++; while(--i); j; }) => 10
OK

test/riscv/decl.exe
({ char x; sizeof(x); }) => 1
({ short int x; sizeof(x); }) => 2
({ int short x; sizeof(x); }) => 2
({ int x; sizeof(x); }) => 4
({ long int x; sizeof(x); }) => 8
({ int long x; sizeof(x); }) => 8
({ long long x; sizeof(x); }) => 8
({ _Bool x=0; x; }) => 0
({ _Bool x=1; x; }) => 1
({ _Bool x=2; x; }) => 1
(_Bool)1 => 1
(_Bool)2 => 1
(_Bool)(char)256 => 0
OK

test/riscv/enum.exe
({ enum { zero, one, two }; zero; }) => 0
({ enum { zero, one, two }; one; }) => 1
({ enum { zero, one, two }; two; }) => 2
({ enum { five=5, six, seven }; five; }) => 5
({ enum { five=5, six, seven }; six; }) => 6
({ enum { zero, five=5, three=3, four }; zero; }) => 0
({ enum { zero, five=5, three=3, four }; five; }) => 5
({ enum { zero, five=5, three=3, four }; three; }) => 3
({ enum { zero, five=5, three=3, four }; four; }) => 4
({ enum { zero, one, two } x; sizeof(x); }) => 4
({ enum t { zero, one, two }; enum t y; sizeof(y); }) => 4
OK

test/riscv/extern.exe
ext1 => 5
*ext2 => 5
ext3 => 7
ext_fn1(5) => 5
ext_fn2(8) => 8
OK

test/riscv/float.exe
(float)(char)35 => 35
(float)(short)35 => 35
(float)(int)35 => 35
(float)(long)35 => 35
(float)(unsigned char)35 => 35
(float)(unsigned short)35 => 35
(float)(unsigned int)35 => 35
(float)(unsigned long)35 => 35
(double)(char)35 => 35
(double)(short)35 => 35
(double)(int)35 => 35
(double)(long)35 => 35
(double)(unsigned char)35 => 35
(double)(unsigned short)35 => 35
(double)(unsigned int)35 => 35
(double)(unsigned long)35 => 35
(char)(float)35 => 35
(short)(float)35 => 35
(int)(float)35 => 35
(long)(float)35 => 35
(unsigned char)(float)35 => 35
(unsigned short)(float)35 => 35
(unsigned int)(float)35 => 35
(unsigned long)(float)35 => 35
(char)(double)35 => 35
(short)(double)35 => 35
(int)(double)35 => 35
(long)(double)35 => 35
(unsigned char)(double)35 => 35
(unsigned short)(double)35 => 35
(unsigned int)(double)35 => 35
(unsigned long)(double)35 => 35
2e3==2e3 => 1
2e3==2e5 => 0
2.0==2 => 1
5.1<5 => 0
5.0<5 => 0
4.9<5 => 1
5.1<=5 => 0
5.0<=5 => 1
4.9<=5 => 1
2e3f==2e3 => 1
2e3f==2e5 => 0
2.0f==2 => 1
5.1f<5 => 0
5.0f<5 => 0
4.9f<5 => 1
5.1f<=5 => 0
5.0f<=5 => 1
4.9f<=5 => 1
2.3+3.8 => 6
2.3-3.8 => -1
-3.8 => -3
3.3*4 => 13
5.0/2 => 2
2.3f+3.8f => 6
2.3f+3.8 => 6
2.3f-3.8 => -1
-3.8f => -3
3.3f*4 => 13
5.0f/2 => 2
0.0/0.0 ==0.0/0.0 => 0
0.0/0.0 !=0.0/0.0 => 1
0.0/0.0 < 0 => 0
0.0/0.0 <= 0 => 0
0.0/0.0 > 0 => 0
0.0/0.0 >= 0 => 0
!3. => 0
!0. => 1
!3.f => 0
!0.f => 1
0.0 ? 3 : 5 => 5
1.2 ? 3 : 5 => 3
OK

test/riscv/function.exe
ret3() => 3
add2(3, 5) => 8
sub2(5, 3) => 2
add6(1,2,3,4,5,6) => 21
add6(1,2,add6(3,4,5,6,7,8),9,10,11) => 66
add6(1,2,add6(3,add6(4,5,6,7,8,9),10,11,12,13),14,15,16) => 136
add2(3,4) => 7
sub2(4,3) => 1
fib(9) => 55
({ sub_char(7, 3, 3); }) => 1
sub_long(7, 3, 3) => 1
sub_short(7, 3, 3) => 1
*g1_ptr() => 3
int_to_char(261) => 5
int_to_char(261) => 5
div_long(-10, 2) => -5
bool_fn_add(3) => 1
bool_fn_sub(3) => 0
bool_fn_add(-3) => 1
bool_fn_sub(-3) => 0
bool_fn_add(0) => 1
bool_fn_sub(0) => 1
static_fn() => 3
({ int x[2]; x[0]=3; param_decay(x); }) => 3
counter() => 2
counter() => 4
counter() => 6
true_fn() => 1
false_fn() => 0
char_fn() => 3
short_fn() => 5
add_all(3,1,2,3) => 6
add_all(4,1,2,3,-1) => 5
({ char buf[100]; sprintf(buf, "%d %d %s", 1, 2, "foo"); strcmp("1 2 foo", buf); }) => 0
1 2 foo
({ char buf[100]; fmt(buf, "%d %d %s", 1, 2, "foo"); strcmp("1 2 foo", buf); }) => 0
uchar_fn() => 251
ushort_fn() => 65528
schar_fn() => -5
sshort_fn() => -8
add_float(2.3,3.8) => 6
add_double(2.3,3.8) => 6
add_float3(2.5,2.5,2.5) => 7
add_double3(2.5,2.5,2.5) => 7
({ char buf[100]; sprintf(buf, "%.1f", (float)3.5); strcmp(buf, "3.5"); }) => 0
({ char buf[100]; fmt(buf, "%.1f", (float)3.5); strcmp(buf, "3.5"); }) => 0
(add2)(2,3) => 5
(&add2)(2,3) => 5
({ int (*fn)(int,int) = add2; fn(2,5); }) => 7
fnptr(add_all)(3, 1, 2, 3) => 6
param_decay2(ret3) => 3
sizeof(__func__) => 5
strcmp("main", __func__) => 0
strcmp("func_fn", func_fn()) => 0
strcmp("main", __FUNCTION__) => 0
strcmp("function_fn", function_fn()) => 0
OK

test/riscv/initializer.exe
({ int x[3]={1,2,3}; x[0]; }) => 1
({ int x[3]={1,2,3}; x[1]; }) => 2
({ int x[3]={1,2,3}; x[2]; }) => 3
({ int x[3]={1,2,3}; x[2]; }) => 3
({ int x[2][3]={{1,2,3},{4,5,6}}; x[0][1]; }) => 2
({ int x[2][3]={{1,2,3},{4,5,6}}; x[1][0]; }) => 4
({ int x[2][3]={{1,2,3},{4,5,6}}; x[1][2]; }) => 6
({ int x[3]={}; x[0]; }) => 0
({ int x[3]={}; x[1]; }) => 0
({ int x[3]={}; x[2]; }) => 0
({ int x[2][3]={{1,2}}; x[0][1]; }) => 2
({ int x[2][3]={{1,2}}; x[1][0]; }) => 0
({ int x[2][3]={{1,2}}; x[1][2]; }) => 0
({ char x[4]="abc"; x[0]; }) => 97
({ char x[4]="abc"; x[2]; }) => 99
({ char x[4]="abc"; x[3]; }) => 0
({ char x[2][4]={"abc","def"}; x[0][0]; }) => 97
({ char x[2][4]={"abc","def"}; x[0][3]; }) => 0
({ char x[2][4]={"abc","def"}; x[1][0]; }) => 100
({ char x[2][4]={"abc","def"}; x[1][2]; }) => 102
({ int x[]={1,2,3,4}; x[3]; }) => 4
({ int x[]={1,2,3,4}; sizeof(x); }) => 16
({ char x[]="foo"; sizeof(x); }) => 4
({ typedef char T[]; T x="foo"; T y="x"; sizeof(x); }) => 4
({ typedef char T[]; T x="foo"; T y="x"; sizeof(y); }) => 2
({ typedef char T[]; T x="x"; T y="foo"; sizeof(x); }) => 2
({ typedef char T[]; T x="x"; T y="foo"; sizeof(y); }) => 4
({ struct {int a; int b; int c;} x={1,2,3}; x.a; }) => 1
({ struct {int a; int b; int c;} x={1,2,3}; x.b; }) => 2
({ struct {int a; int b; int c;} x={1,2,3}; x.c; }) => 3
({ struct {int a; int b; int c;} x={1}; x.a; }) => 1
({ struct {int a; int b; int c;} x={1}; x.b; }) => 0
({ struct {int a; int b; int c;} x={1}; x.c; }) => 0
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[0].a; }) => 1
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[0].b; }) => 2
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[1].a; }) => 3
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[1].b; }) => 4
({ struct {int a; int b;} x[2]={{1,2}}; x[1].b; }) => 0
({ struct {int a; int b;} x={}; x.a; }) => 0
({ struct {int a; int b;} x={}; x.b; }) => 0
({ typedef struct {int a,b,c,d,e,f;} T; T x={1,2,3,4,5,6}; T y; y=x; y.e; }) => 5
({ typedef struct {int a,b;} T; T x={1,2}; T y, z; z=y=x; z.b; }) => 2
({ typedef struct {int a,b;} T; T x={1,2}; T y=x; y.a; }) => 1
({ union { int a; char b[4]; } x={0x01020304}; x.b[0]; }) => 4
({ union { int a; char b[4]; } x={0x01020304}; x.b[1]; }) => 3
({ union { struct { char a,b,c,d; } e; int f; } x={{4,3,2,1}}; x.f; }) => 16909060
g3 => 3
g4 => 4
g5 => 5
g6 => 6
g9[0] => 0
g9[1] => 1
g9[2] => 2
g11[0].a => 1
g11[0].b => 2
g11[1].a => 3
g11[1].b => 4
g12[0].a[0] => 1
g12[0].a[1] => 2
g12[1].a[0] => 0
g12[1].a[1] => 0
g13[0].b[0] => 4
g13[0].b[1] => 3
g13[1].b[0] => 8
g13[1].b[1] => 7
sizeof(g17) => 7
sizeof(g18) => 10
sizeof(g19) => 3
memcmp(g17, "foobar", 7) => 0
memcmp(g18, "foobar\0\0\0", 10) => 0
memcmp(g19, "foo", 3) => 0
strcmp(g20, "foobar") => 0
strcmp(g21, "bar") => 0
strcmp(g22+3, "foobar") => 0
strcmp(g23[0], "foobar") => 0
strcmp(g23[1], "bar") => 0
strcmp(g23[2]+3, "foobar") => 0
g24 => 3
*g25 => 3
*g27 => 2
*g28 => 3
*(int *)g29 => 1
g31[0] => 1
g31[1] => 2
g31[2] => 3
g40[0].a[0] => 1
g40[0].a[1] => 2
g40[1].a[0] => 3
g40[1].a[1] => 4
g41[0].a[0] => 1
g41[0].a[1] => 2
g41[1].a[0] => 3
g41[1].a[1] => 4
({ int x[2][3]={0,1,2,3,4,5}; x[0][0]; }) => 0
({ int x[2][3]={0,1,2,3,4,5}; x[1][0]; }) => 3
({ struct {int a; int b;} x[2]={0,1,2,3}; x[0].a; }) => 0
({ struct {int a; int b;} x[2]={0,1,2,3}; x[1].a; }) => 2
strcmp(g43[0], "foo") => 0
strcmp(g43[1], "bar") => 0
strcmp(g44, "foo") => 0
({ int a[]={1,2,3,}; a[2]; }) => 3
({ struct {int a,b,c;} x={1,2,3,}; x.a; }) => 1
({ union {int a; char b;} x={1,}; x.a; }) => 1
({ enum {x,y,z,}; z; }) => 2
sizeof(g60) => 3
sizeof(g61) => 6
sizeof(g65) => 4
sizeof(g66) => 7
strcmp(g65.b, "oo") => 0
strcmp(g66.b, "oobar") => 0
OK

test/riscv/literal.exe
'a' => 97
'\n' => 10
'\x80' => -128
0777 => 511
0x0 => 0
0xa => 10
0XA => 10
0xbeef => 48879
0xBEEF => 48879
0XBEEF => 48879
0b0 => 0
0b1 => 1
0b101111 => 47
0B101111 => 47
sizeof(0) => 4
sizeof(0L) => 8
sizeof(0LU) => 8
sizeof(0UL) => 8
sizeof(0LL) => 8
sizeof(0LLU) => 8
sizeof(0Ull) => 8
sizeof(0l) => 8
sizeof(0ll) => 8
sizeof(0x0L) => 8
sizeof(0b0L) => 8
sizeof(2147483647) => 4
sizeof(2147483648) => 8
0xffffffffffffffff => -1
sizeof(0xffffffffffffffff) => 8
sizeof(4294967295U) => 4
sizeof(4294967296U) => 8
-1U>>30 => 3
-1Ul>>62 => 3
-1ull>>62 => 3
0xffffffffffffffffl>>63 => 1
0xffffffffffffffffll>>63 => 1
18446744073709551615 => -1
sizeof(18446744073709551615) => 8
18446744073709551615>>63 => -1
0xffffffffffffffff => -1
sizeof(0xffffffffffffffff) => 8
0xffffffffffffffff>>63 => 1
01777777777777777777777 => -1
sizeof(01777777777777777777777) => 8
01777777777777777777777>>63 => 1
0b1111111111111111111111111111111111111111111111111111111111111111 => -1
sizeof(0b1111111111111111111111111111111111111111111111111111111111111111) => 8
0b1111111111111111111111111111111111111111111111111111111111111111>>63 => 1
sizeof(2147483648) => 8
sizeof(2147483647) => 4
sizeof(0x1ffffffff) => 8
sizeof(0xffffffff) => 4
0xffffffff>>31 => 1
sizeof(040000000000) => 8
sizeof(037777777777) => 4
037777777777>>31 => 1
sizeof(0b111111111111111111111111111111111) => 8
sizeof(0b11111111111111111111111111111111) => 4
0b11111111111111111111111111111111>>31 => 1
1 << 31 >> 31 => -1
01 << 31 >> 31 => -1
0x1 << 31 >> 31 => -1
0b1 << 31 >> 31 => -1
sizeof(8f) => 4
sizeof(0.3F) => 4
sizeof(0.) => 8
sizeof(.0) => 8
sizeof(5.l) => 8
sizeof(2.0L) => 8
sizeof(char) => 1
sizeof(L'\0') => 4
L'a' => 97
OK

test/riscv/macro.exe
include1 => 5
include2 => 7
m => 5
m => 3
m => 3
m => 2
m => 2
m => 3
m => 1
m => 2
M1 => 3
M1 => 4
M1 5 => 12
M1*5 => 23
5 => 5
m => 5
m => 5
M2 => 9
M3 => 12
M4 => 13
m => 3
m => 5
m => 3
m => 5
M7() => 1
M7 => 5
ret3 () => 3
M8(3, 4) => 7
M8(3+4, 4+5) => 24
M8(3+4, 4+5) => 63
M8(, 4+5) => 9
M8((2+3), 4) => 20
M8((2,3), 4) => 12
dbl(2) => 10
M11( a!b `""c)[0] => 97
M11( a!b `""c)[1] => 33
M11( a!b `""c)[2] => 98
M11( a!b `""c)[3] => 32
M11( a!b `""c)[4] => 96
M11( a!b `""c)[5] => 34
M11( a!b `""c)[6] => 34
M11( a!b `""c)[7] => 99
M11( a!b `""c)[8] => 0
paste(1,5) => 15
paste(0,xff) => 255
({ int foobar=3; foobar; }) => 3
paste(5,) => 5
paste(,5) => 5
({ int i3=100; 1+i3; }) => 101
paste2(1+2) => 26
paste3(1+2) => 23
paste4(1,2,3) => 123
m => 3
m => 3
m => 4
m => 4
m => 5
strcmp("foo.bar", "foo.bar") => 0
strcmp("foo. bar", "foo. bar") => 0
strcmp("bar.foo", "bar.foo") => 0
strcmp("bar. foo", "bar. foo") => 0
foo => 3
foo => 4
foo => 3
foo => 4
__STDC__ => 1
strcmp(main_filename1, "test/macro.c") => 0
main_line1 => 5
main_line2 => 7
strcmp(include1_filename, "test/include1.h") => 0
include1_line => 4
M14() => 3
M14() 2 => 2
M14(5) => 5
M14(2, 6) => 8
M14(3,4,5) => 21
M14(3,4,5) => 21
M14(5) => 5
OK

test/riscv/pointer.exe
({ int x=3; *&x; }) => 3
({ int x=3; int *y=&x; int **z=&y; **z; }) => 3
({ int x=3; int y=5; *(&x+1); }) => 5
({ int x=3; int y=5; *(&y-1); }) => 3
({ int x=3; int y=5; *(&x-(-1)); }) => 5
({ int x=3; int *y=&x; *y=5; x; }) => 5
({ int x=3; int y=5; *(&x+1)=7; y; }) => 7
({ int x=3; int y=5; *(&y-2+1)=7; x; }) => 7
({ int x=3; (&x+2)-&x+3; }) => 5
({ int x, y; x=3; y=5; x+y; }) => 8
({ int x=3, y=5; x+y; }) => 8
({ int x[2]; int *y=&x; *y=3; *x; }) => 3
({ int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *x; }) => 3
({ int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+1); }) => 4
({ int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+2); }) => 5
({ int x[2][3]; int *y=x; *y=0; **x; }) => 0
({ int x[2][3]; int *y=x; *(y+1)=1; *(*x+1); }) => 1
({ int x[2][3]; int *y=x; *(y+2)=2; *(*x+2); }) => 2
({ int x[2][3]; int *y=x; *(y+3)=3; **(x+1); }) => 3
({ int x[2][3]; int *y=x; *(y+4)=4; *(*(x+1)+1); }) => 4
({ int x[2][3]; int *y=x; *(y+5)=5; *(*(x+1)+2); }) => 5
({ int x[3]; *x=3; x[1]=4; x[2]=5; *x; }) => 3
({ int x[3]; *x=3; x[1]=4; x[2]=5; *(x+1); }) => 4
({ int x[3]; *x=3; x[1]=4; x[2]=5; *(x+2); }) => 5
({ int x[3]; *x=3; x[1]=4; x[2]=5; *(x+2); }) => 5
({ int x[3]; *x=3; x[1]=4; 2[x]=5; *(x+2); }) => 5
({ int x[2][3]; int *y=x; y[0]=0; x[0][0]; }) => 0
({ int x[2][3]; int *y=x; y[1]=1; x[0][1]; }) => 1
({ int x[2][3]; int *y=x; y[2]=2; x[0][2]; }) => 2
({ int x[2][3]; int *y=x; y[3]=3; x[1][0]; }) => 3
({ int x[2][3]; int *y=x; y[4]=4; x[1][1]; }) => 4
({ int x[2][3]; int *y=x; y[5]=5; x[1][2]; }) => 5
OK

test/riscv/sizeof.exe
sizeof(char) => 1
sizeof(short) => 2
sizeof(short int) => 2
sizeof(int short) => 2
sizeof(int) => 4
sizeof(long) => 8
sizeof(long int) => 8
sizeof(long int) => 8
sizeof(char *) => 8
sizeof(int *) => 8
sizeof(long *) => 8
sizeof(int **) => 8
sizeof(int(*)[4]) => 8
sizeof(int*[4]) => 32
sizeof(int[4]) => 16
sizeof(int[3][4]) => 48
sizeof(struct {int a; int b;}) => 8
sizeof(-10 + (long)5) => 8
sizeof(-10 - (long)5) => 8
sizeof(-10 * (long)5) => 8
sizeof(-10 / (long)5) => 8
sizeof((long)-10 + 5) => 8
sizeof((long)-10 - 5) => 8
sizeof((long)-10 * 5) => 8
sizeof((long)-10 / 5) => 8
({ char i; sizeof(++i); }) => 1
sizeof(int(*)[10]) => 8
sizeof(int(*)[][10]) => 8
sizeof(struct { int x, y[]; }) => 4
sizeof(char) => 1
sizeof(signed char) => 1
sizeof(signed char signed) => 1
sizeof(unsigned char) => 1
sizeof(unsigned char unsigned) => 1
sizeof(short) => 2
sizeof(int short) => 2
sizeof(short int) => 2
sizeof(signed short) => 2
sizeof(int short signed) => 2
sizeof(unsigned short) => 2
sizeof(int short unsigned) => 2
sizeof(int) => 4
sizeof(signed int) => 4
sizeof(signed) => 4
sizeof(signed signed) => 4
sizeof(unsigned int) => 4
sizeof(unsigned) => 4
sizeof(unsigned unsigned) => 4
sizeof(long) => 8
sizeof(signed long) => 8
sizeof(signed long int) => 8
sizeof(unsigned long) => 8
sizeof(unsigned long int) => 8
sizeof(long long) => 8
sizeof(signed long long) => 8
sizeof(signed long long int) => 8
sizeof(unsigned long long) => 8
sizeof(unsigned long long int) => 8
sizeof((char)1) => 1
sizeof((short)1) => 2
sizeof((int)1) => 4
sizeof((long)1) => 8
sizeof((char)1 + (char)1) => 4
sizeof((short)1 + (short)1) => 4
sizeof(1?2:3) => 4
sizeof(1?(short)2:(char)3) => 4
sizeof(1?(long)2:(char)3) => 8
sizeof(char) << 31 >> 31 => 1
sizeof(char) << 63 >> 63 => 1
sizeof(float) => 4
sizeof(double) => 8
sizeof(1f+2) => 4
sizeof(1.0+2) => 8
sizeof(1f-2) => 4
sizeof(1.0-2) => 8
sizeof(1f*2) => 4
sizeof(1.0*2) => 8
sizeof(1f/2) => 4
sizeof(1.0/2) => 8
sizeof(long double) => 8
OK

test/riscv/stdhdr.exe
OK

test/riscv/string.exe
""[0] => 0
sizeof("") => 1
"abc"[0] => 97
"abc"[1] => 98
"abc"[2] => 99
"abc"[3] => 0
sizeof("abc") => 4
"\a"[0] => 7
"\b"[0] => 8
"\t"[0] => 9
"\n"[0] => 10
"\v"[0] => 11
"\f"[0] => 12
"\r"[0] => 13
"\e"[0] => 27
"\j"[0] => 106
"\k"[0] => 107
"\l"[0] => 108
"\ax\ny"[0] => 7
"\ax\ny"[1] => 120
"\ax\ny"[2] => 10
"\ax\ny"[3] => 121
"\0"[0] => 0
"\20"[0] => 16
"\101"[0] => 65
"\1500"[0] => 104
"\x00"[0] => 0
"\x77"[0] => 119
sizeof("abc" "def") => 7
sizeof("abc" "d" "efgh") => 9
strcmp("abc" "d" "\nefgh", "abcd\nefgh") => 0
!strcmp("abc" "d", "abcd\nefgh") => 0
strcmp("\x9" "0", "\t0") => 0
OK

test/riscv/struct.exe
({ struct {int a; int b;} x; x.a=1; x.b=2; x.a; }) => 1
({ struct {int a; int b;} x; x.a=1; x.b=2; x.b; }) => 2
({ struct {char a; int b; char c;} x; x.a=1; x.b=2; x.c=3; x.a; }) => 1
({ struct {char a; int b; char c;} x; x.b=1; x.b=2; x.c=3; x.b; }) => 2
({ struct {char a; int b; char c;} x; x.a=1; x.b=2; x.c=3; x.c; }) => 3
({ struct {char a; char b;} x[3]; char *p=x; p[0]=0; x[0].a; }) => 0
({ struct {char a; char b;} x[3]; char *p=x; p[1]=1; x[0].b; }) => 1
({ struct {char a; char b;} x[3]; char *p=x; p[2]=2; x[1].a; }) => 2
({ struct {char a; char b;} x[3]; char *p=x; p[3]=3; x[1].b; }) => 3
({ struct {char a[3]; char b[5];} x; char *p=&x; x.a[0]=6; p[0]; }) => 6
({ struct {char a[3]; char b[5];} x; char *p=&x; x.b[0]=7; p[3]; }) => 7
({ struct { struct { char b; } a; } x; x.a.b=6; x.a.b; }) => 6
({ struct {int a;} x; sizeof(x); }) => 4
({ struct {int a; int b;} x; sizeof(x); }) => 8
({ struct {int a, b;} x; sizeof(x); }) => 8
({ struct {int a[3];} x; sizeof(x); }) => 12
({ struct {int a;} x[4]; sizeof(x); }) => 16
({ struct {int a[3];} x[2]; sizeof(x); }) => 24
({ struct {char a; char b;} x; sizeof(x); }) => 2
({ struct {} x; sizeof(x); }) => 0
({ struct {char a; int b;} x; sizeof(x); }) => 8
({ struct {int a; char b;} x; sizeof(x); }) => 8
({ struct t {int a; int b;} x; struct t y; sizeof(y); }) => 8
({ struct t {int a; int b;}; struct t y; sizeof(y); }) => 8
({ struct t {char a[2];}; { struct t {char a[4];}; } struct t y; sizeof(y); }) => 2
({ struct t {int x;}; int t=1; struct t y; y.x=2; t+y.x; }) => 3
({ struct t {char a;} x; struct t *y = &x; x.a=3; y->a; }) => 3
({ struct t {char a;} x; struct t *y = &x; y->a=3; x.a; }) => 3
({ struct {int a,b;} x,y; x.a=3; y=x; y.a; }) => 3
({ struct t {int a,b;}; struct t x; x.a=7; struct t y; struct t *z=&y; *z=x; y.a; }) => 7
({ struct t {int a,b;}; struct t x; x.a=7; struct t y, *p=&x, *q=&y; *q=*p; y.a; }) => 7
({ struct t {char a, b;} x, y; x.a=5; y=x; y.a; }) => 5
({ struct t {int a; int b;} x; struct t y; sizeof(y); }) => 8
({ struct t {int a; int b;}; struct t y; sizeof(y); }) => 8
({ struct {char a; long b;} x; sizeof(x); }) => 16
({ struct {char a; short b;} x; sizeof(x); }) => 4
({ struct foo *bar; sizeof(bar); }) => 8
({ struct T *foo; struct T {int x;}; sizeof(struct T); }) => 4
({ struct T { struct T *next; int x; } a; struct T b; b.x=1; a.next=&b; a.next->x; }) => 1
({ typedef struct T T; struct T { int x; }; sizeof(T); }) => 4
OK

test/riscv/typedef.exe
({ typedef int t; t x=1; x; }) => 1
({ typedef struct {int a;} t; t x; x.a=1; x.a; }) => 1
({ typedef int t; t t=1; t; }) => 1
({ typedef struct {int a;} t; { typedef int t; } t x; x.a=2; x.a; }) => 2
({ typedef t; t x; sizeof(x); }) => 4
({ MyInt x=3; x; }) => 3
({ MyInt2 x; sizeof(x); }) => 16
OK

test/riscv/union.exe
({ union { int a; char b[6]; } x; sizeof(x); }) => 8
({ union { int a; char b[4]; } x; x.a = 515; x.b[0]; }) => 3
({ union { int a; char b[4]; } x; x.a = 515; x.b[1]; }) => 2
({ union { int a; char b[4]; } x; x.a = 515; x.b[2]; }) => 0
({ union { int a; char b[4]; } x; x.a = 515; x.b[3]; }) => 0
({ union {int a,b;} x,y; x.a=3; y.a=5; y=x; y.a; }) => 3
({ union {struct {int a,b;} c;} x,y; x.c.b=3; y.c.b=5; y=x; y.c.b; }) => 3
OK

test/riscv/usualconv.exe
-10 + (long)5 => -5
-10 - (long)5 => -15
-10 * (long)5 => -50
-10 / (long)5 => -2
-2 < (long)-1 => 1
-2 <= (long)-1 => 1
-2 > (long)-1 => 0
-2 >= (long)-1 => 0
(long)-2 < -1 => 1
(long)-2 <= -1 => 1
(long)-2 > -1 => 0
(long)-2 >= -1 => 0
2147483647 + 2147483647 + 2 => 0
({ long x; x=-1; x; }) => -1
({ char x[3]; x[0]=0; x[1]=1; x[2]=2; char *y=x+1; y[0]; }) => 1
({ char x[3]; x[0]=0; x[1]=1; x[2]=2; char *y=x+1; y[-1]; }) => 0
({ struct t {char a;} x, y; x.a=5; y=x; y.a; }) => 5
(1 ? ret10 : (void *)0)() => 10
OK

test/riscv/varargs.exe
sum1(1, 2, 3, 0) => 6
sum2(1,2.0, 3,4.0, 5,6.0, 0) => 21
OK

test/riscv/variable.exe
({ int a; a=3; a; }) => 3
({ int a=3; a; }) => 3
({ int a=3; int z=5; a+z; }) => 8
({ int a=3; a; }) => 3
({ int a=3; int z=5; a+z; }) => 8
({ int a; int b; a=b=3; a+b; }) => 6
({ int foo=3; foo; }) => 3
({ int foo123=3; int bar=5; foo123+bar; }) => 8
({ int x; sizeof(x); }) => 4
({ int x; sizeof x; }) => 4
({ int *x; sizeof(x); }) => 8
({ int x[4]; sizeof(x); }) => 16
({ int x[3][4]; sizeof(x); }) => 48
({ int x[3][4]; sizeof(*x); }) => 16
({ int x[3][4]; sizeof(**x); }) => 4
({ int x[3][4]; sizeof(**x) + 1; }) => 5
({ int x[3][4]; sizeof **x + 1; }) => 5
({ int x[3][4]; sizeof(**x + 1); }) => 4
({ int x=1; sizeof(x=2); }) => 4
({ int x=1; sizeof(x=2); x; }) => 1
g1 => 0
({ g1=3; g1; }) => 3
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[0]; }) => 0
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[1]; }) => 1
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[2]; }) => 2
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[3]; }) => 3
sizeof(g1) => 4
sizeof(g2) => 16
({ char x=1; x; }) => 1
({ char x=1; char y=2; x; }) => 1
({ char x=1; char y=2; y; }) => 2
({ char x; sizeof(x); }) => 1
({ char x[10]; sizeof(x); }) => 10
({ int x=2; { int x=3; } x; }) => 2
({ int x=2; { int x=3; } int y=4; x; }) => 2
({ int x=2; { x=3; } x; }) => 3
({ int x; int y; char z; char *a=&y; char *b=&z; b-a; }) => 7
({ int x; char y; int z; char *a=&y; char *b=&z; b-a; }) => 1
({ long x; sizeof(x); }) => 8
({ short x; sizeof(x); }) => 2
({ char *x[3]; sizeof(x); }) => 24
({ char (*x)[3]; sizeof(x); }) => 8
({ char (x); sizeof(x); }) => 1
({ char (x)[3]; sizeof(x); }) => 3
({ char (x[3])[4]; sizeof(x); }) => 12
({ char (x[3])[4]; sizeof(x[0]); }) => 4
({ char *x[3]; char y; x[0]=&y; y=3; x[0][0]; }) => 3
({ char x[3]; char (*y)[3]=x; y[0][0]=4; y[0][0]; }) => 4
g3 => 3
OK

test/driver.sh ./chibicc
testing -o ... passed
testing --help ... passed
testing -march=x64 ... passed
testing -march=riscv ... passed
testing -S ... passed
testing default output file ... passed
testing default output file ... passed
testing multiple input files ... passed
testing multiple input files ... passed
testing linker ... passed
testing linker ... passed
testing a.out ... passed
testing -E ... passed
testing -E and -o ... passed
testing -I ... passed
OK
make[1]: Leaving directory '/home/corco/github.com/daily/cike/chibicc/c197'
make test-stage2 ARCH=riscv
make[1]: Entering directory '/home/corco/github.com/daily/cike/chibicc/c197'
for i in stage2/test/alignof.exe stage2/test/arith.exe stage2/test/cast.exe stage2/test/compat.exe stage2/test/complit.exe stage2/test/const.exe stage2/test/constexpr.exe stage2/test/control.exe stage2/test/decl.exe stage2/test/enum.exe stage2/test/extern.exe stage2/test/float.exe stage2/test/function.exe stage2/test/initializer.exe stage2/test/literal.exe stage2/test/macro.exe stage2/test/pointer.exe stage2/test/sizeof.exe stage2/test/stdhdr.exe stage2/test/string.exe stage2/test/struct.exe stage2/test/typedef.exe stage2/test/union.exe stage2/test/usualconv.exe stage2/test/varargs.exe stage2/test/variable.exe; do echo $i; ./$i || exit 1; echo; done
stage2/test/alignof.exe
_Alignof(char) => 1
_Alignof(short) => 2
_Alignof(int) => 4
_Alignof(long) => 8
_Alignof(long long) => 8
_Alignof(char[3]) => 1
_Alignof(int[3]) => 4
_Alignof(struct {char a; char b;}[2]) => 1
_Alignof(struct {char a; long b;}[2]) => 8
({ _Alignas(char) char x, y; &y-&x; }) => 1
({ _Alignas(long) char x, y; &y-&x; }) => 8
({ _Alignas(32) char x, y; &y-&x; }) => 32
({ _Alignas(32) int *x, *y; ((char *)&y)-((char *)&x); }) => 32
({ struct { _Alignas(16) char x, y; } a; &a.y-&a.x; }) => 16
({ struct T { _Alignas(8) char a; }; _Alignof(struct T); }) => 8
(long)(char *)&g1 % 512 => 0
(long)(char *)&g2 % 512 => 0
(long)(char *)&g4 % 4 => 0
(long)(char *)&g5 % 8 => 0
({ char x; _Alignof(x); }) => 1
({ int x; _Alignof(x); }) => 4
({ char x; _Alignof x; }) => 1
({ int x; _Alignof x; }) => 4
_Alignof(char) << 31 >> 31 => 1
_Alignof(char) << 63 >> 63 => 1
({ char x; _Alignof(x) << 63 >> 63; }) => 1
OK

stage2/test/arith.exe
0 => 0
42 => 42
5+20-4 => 21
12 + 34 - 5 => 41
5+6*7 => 47
5*(9-6) => 15
(3+5)/2 => 4
-10+20 => 10
- -10 => 10
- - +10 => 10
0==1 => 0
42==42 => 1
0!=1 => 1
42!=42 => 0
0<1 => 1
1<1 => 0
2<1 => 0
0<=1 => 1
1<=1 => 1
2<=1 => 0
1>0 => 1
1>1 => 0
1>2 => 0
1>=0 => 1
1>=1 => 1
1>=2 => 0
1073741824 * 100 / 100 => 0
({ int i=2; i+=5; i; }) => 7
({ int i=2; i+=5; }) => 7
({ int i=5; i-=2; i; }) => 3
({ int i=5; i-=2; }) => 3
({ int i=3; i*=2; i; }) => 6
({ int i=3; i*=2; }) => 6
({ int i=6; i/=2; i; }) => 3
({ int i=6; i/=2; }) => 3
({ int i=2; ++i; }) => 3
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; ++*p; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; --*p; }) => 0
({ int i=2; i++; }) => 2
({ int i=2; i--; }) => 2
({ int i=2; i++; i; }) => 3
({ int i=2; i--; i; }) => 1
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p++; }) => 1
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p--; }) => 1
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[0]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*(p--))--; a[1]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p)--; a[2]; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p)--; p++; *p; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[0]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[1]; }) => 0
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[2]; }) => 2
({ int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; *p; }) => 2
!1 => 0
!2 => 0
!0 => 1
!(char)0 => 1
!(long)3 => 0
sizeof(!(char)0) => 4
sizeof(!(long)0) => 4
~0 => -1
~-1 => 0
17%6 => 5
((long)17)%6 => 5
({ int i=10; i%=4; i; }) => 2
({ long i=10; i%=4; i; }) => 2
0&1 => 0
3&1 => 1
7&3 => 3
-1&10 => 10
0|1 => 1
0b10000|0b00011 => 19
0^0 => 0
0b1111^0b1111 => 0
0b111000^0b001100 => 52
({ int i=6; i&=3; i; }) => 2
({ int i=6; i|=3; i; }) => 7
({ int i=15; i^=5; i; }) => 10
0?1:2 => 2
1?1:2 => 1
0?-2:-1 => -1
1?-2:-1 => -2
sizeof(0?1:2) => 4
sizeof(0?(long)1:(long)2) => 8
0?(long)-2:-1 => -1
0?-2:(long)-1 => -1
1?(long)-2:-1 => -2
1?-2:(long)-1 => -2
({ int x; int *p=&x; p+20-p; }) => 20
({ int x; int *p=&x; p+20-p>0; }) => 1
({ int x; int *p=&x; p-20-p; }) => -20
({ int x; int *p=&x; p-20-p<0; }) => 1
(char *)0xffffffffffffffff - (char *)0xfffffffffffffff0 => 15
(char *)0xfffffffffffffff0 - (char *)0xffffffffffffffff => -15
(void *)0xffffffffffffffff > (void *)0 => 1
OK

stage2/test/cast.exe
(int)8590066177 => 131585
(short)8590066177 => 513
(char)8590066177 => 1
(long)1 => 1
(long)&*(int *)0 => 0
({ int x=512; *(char *)&x=1; x; }) => 513
({ int x=5; long y=(long)&x; *(int*)y; }) => 5
(char)255 => -1
(signed char)255 => -1
(unsigned char)255 => 255
(short)65535 => -1
(unsigned short)65535 => 65535
(int)0xffffffff => -1
(unsigned)0xffffffff => -1
-1<1 => 1
-1<(unsigned)1 => 0
(char)127+(char)127 => 254
(short)32767+(short)32767 => 65534
-1>>1 => -1
(unsigned long)-1 => -1
((unsigned)-1)>>1 => 2147483647
(-100)/2 => -50
((unsigned)-100)/2 => 2147483598
((unsigned long)-100)/2 => -50
((long)-1)/(unsigned)100 => 0
(-100)%7 => -2
((unsigned)-100)%7 => 2
((unsigned long)-100)%9 => 6
(int)(unsigned short)65535 => 65535
({ unsigned short x = 65535; x; }) => 65535
({ unsigned short x = 65535; (int)x; }) => 65535
({ typedef short T; T x = 65535; (int)x; }) => -1
({ typedef unsigned short T; T x = 65535; (int)x; }) => 65535
(_Bool)0.0 => 0
(_Bool)0.1 => 1
(char)3.0 => 3
(short)1000.3 => 1000
(int)3.99 => 3
(long)2e15 => 1233977344
(float)3.5 => 3
(double)(float)5.5 => 5
(float)3 => 3
(double)3 => 3
(float)3L => 3
(double)3L => 3
OK

stage2/test/compat.exe
OK

stage2/test/complit.exe
(int){1} => 1
((int[]){0,1,2})[2] => 2
((struct {char a; int b;}){'a', 3}).a => 97
({ int x=3; (int){x}; }) => 3
tree->val => 1
tree->lhs->val => 2
tree->lhs->lhs->val => 3
tree->lhs->rhs->val => 4
OK

stage2/test/const.exe
({ const x = 5; x; }) => 5
({ const x = 8; int *const y=&x; *y; }) => 8
({ const x = 6; *(const * const)&x; }) => 6
OK

stage2/test/constexpr.exe
({ enum { ten=1+2+3+4 }; ten; }) => 10
({ int i=0; switch(3) { case 5-2+0*3: i++; } i; }) => 1
({ int x[1+1]; sizeof(x); }) => 8
({ char x[8-2]; sizeof(x); }) => 6
({ char x[2*3]; sizeof(x); }) => 6
({ char x[12/4]; sizeof(x); }) => 3
({ char x[12%10]; sizeof(x); }) => 2
({ char x[0b110&0b101]; sizeof(x); }) => 4
({ char x[0b110|0b101]; sizeof(x); }) => 7
({ char x[0b111^0b001]; sizeof(x); }) => 6
({ char x[1<<2]; sizeof(x); }) => 4
({ char x[4>>1]; sizeof(x); }) => 2
({ char x[(1==1)+1]; sizeof(x); }) => 2
({ char x[(1!=1)+1]; sizeof(x); }) => 1
({ char x[(1<1)+1]; sizeof(x); }) => 1
({ char x[(1<=1)+1]; sizeof(x); }) => 2
({ char x[1?2:3]; sizeof(x); }) => 2
({ char x[0?2:3]; sizeof(x); }) => 3
({ char x[(1,3)]; sizeof(x); }) => 3
({ char x[!0+1]; sizeof(x); }) => 2
({ char x[!1+1]; sizeof(x); }) => 1
({ char x[~-3]; sizeof(x); }) => 2
({ char x[(5||6)+1]; sizeof(x); }) => 2
({ char x[(0||0)+1]; sizeof(x); }) => 1
({ char x[(1&&1)+1]; sizeof(x); }) => 2
({ char x[(1&&0)+1]; sizeof(x); }) => 1
({ char x[(int)3]; sizeof(x); }) => 3
({ char x[(char)0xffffff0f]; sizeof(x); }) => 15
({ char x[(short)0xffff010f]; sizeof(x); }) => 271
({ char x[(int)0xfffffffffff+5]; sizeof(x); }) => 4
({ char x[(int*)0+2]; sizeof(x); }) => 8
({ char x[(int*)16-1]; sizeof(x); }) => 12
({ char x[(int*)16-(int*)4]; sizeof(x); }) => 3
({ char x[(-1>>31)+5]; sizeof(x); }) => 4
({ char x[(unsigned char)0xffffffff]; sizeof(x); }) => 255
({ char x[(unsigned short)0xffff800f]; sizeof(x); }) => 32783
({ char x[(unsigned int)0xfffffffffff>>31]; sizeof(x); }) => 1
({ char x[(long)-1/((long)1<<62)+1]; sizeof(x); }) => 1
({ char x[(unsigned long)-1/((long)1<<62)+1]; sizeof(x); }) => 4
({ char x[(unsigned)1<-1]; sizeof(x); }) => 1
({ char x[(unsigned)1<=-1]; sizeof(x); }) => 1
g40==1.5 => 1
g41==11 => 1
OK

stage2/test/control.exe
({ int x; if (0) x=2; else x=3; x; }) => 3
({ int x; if (1-1) x=2; else x=3; x; }) => 3
({ int x; if (1) x=2; else x=3; x; }) => 2
({ int x; if (2-1) x=2; else x=3; x; }) => 2
({ int i=0; int j=0; for (i=0; i<=10; i=i+1) j=i+j; j; }) => 55
({ int i=0; while(i<10) i=i+1; i; }) => 10
({ 1; {2;} 3; }) => 3
({ ;;; 5; }) => 5
({ int i=0; while(i<10) i=i+1; i; }) => 10
({ int i=0; int j=0; while(i<=10) {j=i+j; i=i+1;} j; }) => 55
(1,2,3) => 3
({ int i=2, j=3; (i=5,j)=6; i; }) => 5
({ int i=2, j=3; (i=5,j)=6; j; }) => 6
({ int j=0; for (int i=0; i<=10; i=i+1) j=j+i; j; }) => 55
({ int i=3; int j=0; for (int i=0; i<=10; i=i+1) j=j+i; i; }) => 3
0||1 => 1
0||(2-2)||5 => 1
0||0 => 0
0||(2-2) => 0
0&&1 => 0
(2-2)&&5 => 0
1&&5 => 1
({ int i=0; goto a; a: i++; b: i++; c: i++; i; }) => 3
({ int i=0; goto e; d: i++; e: i++; f: i++; i; }) => 2
({ int i=0; goto i; g: i++; h: i++; i: i++; i; }) => 1
({ typedef int foo; goto foo; foo:; 1; }) => 1
({ int i=0; for(;i<10;i++) { if (i == 3) break; } i; }) => 3
({ int i=0; while (1) { if (i++ == 3) break; } i; }) => 4
({ int i=0; for(;i<10;i++) { for (;;) break; if (i == 3) break; } i; }) => 3
({ int i=0; while (1) { while(1) break; if (i++ == 3) break; } i; }) => 4
({ int i=0; int j=0; for (;i<10;i++) { if (i>5) continue; j++; } i; }) => 10
({ int i=0; int j=0; for (;i<10;i++) { if (i>5) continue; j++; } j; }) => 6
({ int i=0; int j=0; for(;!i;) { for (;j!=10;j++) continue; break; } j; }) => 10
({ int i=0; int j=0; while (i++<10) { if (i>5) continue; j++; } i; }) => 11
({ int i=0; int j=0; while (i++<10) { if (i>5) continue; j++; } j; }) => 5
({ int i=0; int j=0; while(!i) { while (j++!=10) continue; break; } j; }) => 11
({ int i=0; switch(0) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 5
({ int i=0; switch(1) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 6
({ int i=0; switch(2) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 7
({ int i=0; switch(3) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }) => 0
({ int i=0; switch(0) { case 0:i=5;break; default:i=7; } i; }) => 5
({ int i=0; switch(1) { case 0:i=5;break; default:i=7; } i; }) => 7
({ int i=0; switch(1) { case 0: 0; case 1: 0; case 2: 0; i=2; } i; }) => 2
({ int i=0; switch(3) { case 0: 0; case 1: 0; case 2: 0; i=2; } i; }) => 0
({ int i=0; switch(-1) { case 0xffffffff: i=3; break; } i; }) => 3
({ int i=0; int j=0; do { j++; } while (i++ < 6); j; }) => 7
({ int i=0; int j=0; int k=0; do { if (++j > 3) break; continue; k++; } while (1); j; }) => 4
0.0 &&0.0 => 0
0.0 &&0.1 => 0
0.3 &&0.0 => 0
0.3 &&0.5 => 1
0.0 ||0.0 => 0
0.0 ||0.1 => 1
0.3 ||0.0 => 1
0.3 ||0.5 => 1
({ int x; if (0.0) x=3; else x=5; x; }) => 5
({ int x; if (0.1) x=3; else x=5; x; }) => 3
({ int x=5; if (0.0) x=3; x; }) => 5
({ int x=5; if (0.1) x=3; x; }) => 3
({ double i=10.0; int j=0; for (; i; i--, j++); j; }) => 10
({ double i=10.0; int j=0; do j++; while(--i); j; }) => 10
OK

stage2/test/decl.exe
({ char x; sizeof(x); }) => 1
({ short int x; sizeof(x); }) => 2
({ int short x; sizeof(x); }) => 2
({ int x; sizeof(x); }) => 4
({ long int x; sizeof(x); }) => 8
({ int long x; sizeof(x); }) => 8
({ long long x; sizeof(x); }) => 8
({ _Bool x=0; x; }) => 0
({ _Bool x=1; x; }) => 1
({ _Bool x=2; x; }) => 1
(_Bool)1 => 1
(_Bool)2 => 1
(_Bool)(char)256 => 0
OK

stage2/test/enum.exe
({ enum { zero, one, two }; zero; }) => 0
({ enum { zero, one, two }; one; }) => 1
({ enum { zero, one, two }; two; }) => 2
({ enum { five=5, six, seven }; five; }) => 5
({ enum { five=5, six, seven }; six; }) => 6
({ enum { zero, five=5, three=3, four }; zero; }) => 0
({ enum { zero, five=5, three=3, four }; five; }) => 5
({ enum { zero, five=5, three=3, four }; three; }) => 3
({ enum { zero, five=5, three=3, four }; four; }) => 4
({ enum { zero, one, two } x; sizeof(x); }) => 4
({ enum t { zero, one, two }; enum t y; sizeof(y); }) => 4
OK

stage2/test/extern.exe
ext1 => 5
*ext2 => 5
ext3 => 7
ext_fn1(5) => 5
ext_fn2(8) => 8
OK

stage2/test/float.exe
(float)(char)35 => 35
(float)(short)35 => 35
(float)(int)35 => 35
(float)(long)35 => 35
(float)(unsigned char)35 => 35
(float)(unsigned short)35 => 35
(float)(unsigned int)35 => 35
(float)(unsigned long)35 => 35
(double)(char)35 => 35
(double)(short)35 => 35
(double)(int)35 => 35
(double)(long)35 => 35
(double)(unsigned char)35 => 35
(double)(unsigned short)35 => 35
(double)(unsigned int)35 => 35
(double)(unsigned long)35 => 35
(char)(float)35 => 35
(short)(float)35 => 35
(int)(float)35 => 35
(long)(float)35 => 35
(unsigned char)(float)35 => 35
(unsigned short)(float)35 => 35
(unsigned int)(float)35 => 35
(unsigned long)(float)35 => 35
(char)(double)35 => 35
(short)(double)35 => 35
(int)(double)35 => 35
(long)(double)35 => 35
(unsigned char)(double)35 => 35
(unsigned short)(double)35 => 35
(unsigned int)(double)35 => 35
(unsigned long)(double)35 => 35
2e3==2e3 => 1
2e3==2e5 => 0
2.0==2 => 1
5.1<5 => 0
5.0<5 => 0
4.9<5 => 1
5.1<=5 => 0
5.0<=5 => 1
4.9<=5 => 1
2e3f==2e3 => 1
2e3f==2e5 => 0
2.0f==2 => 1
5.1f<5 => 0
5.0f<5 => 0
4.9f<5 => 1
5.1f<=5 => 0
5.0f<=5 => 1
4.9f<=5 => 1
2.3+3.8 => 6
2.3-3.8 => -1
-3.8 => -3
3.3*4 => 13
5.0/2 => 2
2.3f+3.8f => 6
2.3f+3.8 => 6
2.3f-3.8 => -1
-3.8f => -3
3.3f*4 => 13
5.0f/2 => 2
0.0/0.0 ==0.0/0.0 => 0
0.0/0.0 !=0.0/0.0 => 1
0.0/0.0 < 0 => 0
0.0/0.0 <= 0 => 0
0.0/0.0 > 0 => 0
0.0/0.0 >= 0 => 0
!3. => 0
!0. => 1
!3.f => 0
!0.f => 1
0.0 ? 3 : 5 => 5
1.2 ? 3 : 5 => 3
OK

stage2/test/function.exe
ret3() => 3
add2(3, 5) => 8
sub2(5, 3) => 2
add6(1,2,3,4,5,6) => 21
add6(1,2,add6(3,4,5,6,7,8),9,10,11) => 66
add6(1,2,add6(3,add6(4,5,6,7,8,9),10,11,12,13),14,15,16) => 136
add2(3,4) => 7
sub2(4,3) => 1
fib(9) => 55
({ sub_char(7, 3, 3); }) => 1
sub_long(7, 3, 3) => 1
sub_short(7, 3, 3) => 1
*g1_ptr() => 3
int_to_char(261) => 5
int_to_char(261) => 5
div_long(-10, 2) => -5
bool_fn_add(3) => 1
bool_fn_sub(3) => 0
bool_fn_add(-3) => 1
bool_fn_sub(-3) => 0
bool_fn_add(0) => 1
bool_fn_sub(0) => 1
static_fn() => 3
({ int x[2]; x[0]=3; param_decay(x); }) => 3
counter() => 2
counter() => 4
counter() => 6
true_fn() => 1
false_fn() => 0
char_fn() => 3
short_fn() => 5
add_all(3,1,2,3) => 6
add_all(4,1,2,3,-1) => 5
({ char buf[100]; sprintf(buf, "%d %d %s", 1, 2, "foo"); strcmp("1 2 foo", buf); }) => 0
1 2 foo
({ char buf[100]; fmt(buf, "%d %d %s", 1, 2, "foo"); strcmp("1 2 foo", buf); }) => 0
uchar_fn() => 251
ushort_fn() => 65528
schar_fn() => -5
sshort_fn() => -8
add_float(2.3,3.8) => 6
add_double(2.3,3.8) => 6
add_float3(2.5,2.5,2.5) => 7
add_double3(2.5,2.5,2.5) => 7
({ char buf[100]; sprintf(buf, "%.1f", (float)3.5); strcmp(buf, "3.5"); }) => 0
({ char buf[100]; fmt(buf, "%.1f", (float)3.5); strcmp(buf, "3.5"); }) => 0
(add2)(2,3) => 5
(&add2)(2,3) => 5
({ int (*fn)(int,int) = add2; fn(2,5); }) => 7
fnptr(add_all)(3, 1, 2, 3) => 6
param_decay2(ret3) => 3
sizeof(__func__) => 5
strcmp("main", __func__) => 0
strcmp("func_fn", func_fn()) => 0
strcmp("main", __FUNCTION__) => 0
strcmp("function_fn", function_fn()) => 0
OK

stage2/test/initializer.exe
({ int x[3]={1,2,3}; x[0]; }) => 1
({ int x[3]={1,2,3}; x[1]; }) => 2
({ int x[3]={1,2,3}; x[2]; }) => 3
({ int x[3]={1,2,3}; x[2]; }) => 3
({ int x[2][3]={{1,2,3},{4,5,6}}; x[0][1]; }) => 2
({ int x[2][3]={{1,2,3},{4,5,6}}; x[1][0]; }) => 4
({ int x[2][3]={{1,2,3},{4,5,6}}; x[1][2]; }) => 6
({ int x[3]={}; x[0]; }) => 0
({ int x[3]={}; x[1]; }) => 0
({ int x[3]={}; x[2]; }) => 0
({ int x[2][3]={{1,2}}; x[0][1]; }) => 2
({ int x[2][3]={{1,2}}; x[1][0]; }) => 0
({ int x[2][3]={{1,2}}; x[1][2]; }) => 0
({ char x[4]="abc"; x[0]; }) => 97
({ char x[4]="abc"; x[2]; }) => 99
({ char x[4]="abc"; x[3]; }) => 0
({ char x[2][4]={"abc","def"}; x[0][0]; }) => 97
({ char x[2][4]={"abc","def"}; x[0][3]; }) => 0
({ char x[2][4]={"abc","def"}; x[1][0]; }) => 100
({ char x[2][4]={"abc","def"}; x[1][2]; }) => 102
({ int x[]={1,2,3,4}; x[3]; }) => 4
({ int x[]={1,2,3,4}; sizeof(x); }) => 16
({ char x[]="foo"; sizeof(x); }) => 4
({ typedef char T[]; T x="foo"; T y="x"; sizeof(x); }) => 4
({ typedef char T[]; T x="foo"; T y="x"; sizeof(y); }) => 2
({ typedef char T[]; T x="x"; T y="foo"; sizeof(x); }) => 2
({ typedef char T[]; T x="x"; T y="foo"; sizeof(y); }) => 4
({ struct {int a; int b; int c;} x={1,2,3}; x.a; }) => 1
({ struct {int a; int b; int c;} x={1,2,3}; x.b; }) => 2
({ struct {int a; int b; int c;} x={1,2,3}; x.c; }) => 3
({ struct {int a; int b; int c;} x={1}; x.a; }) => 1
({ struct {int a; int b; int c;} x={1}; x.b; }) => 0
({ struct {int a; int b; int c;} x={1}; x.c; }) => 0
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[0].a; }) => 1
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[0].b; }) => 2
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[1].a; }) => 3
({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[1].b; }) => 4
({ struct {int a; int b;} x[2]={{1,2}}; x[1].b; }) => 0
({ struct {int a; int b;} x={}; x.a; }) => 0
({ struct {int a; int b;} x={}; x.b; }) => 0
({ typedef struct {int a,b,c,d,e,f;} T; T x={1,2,3,4,5,6}; T y; y=x; y.e; }) => 5
({ typedef struct {int a,b;} T; T x={1,2}; T y, z; z=y=x; z.b; }) => 2
({ typedef struct {int a,b;} T; T x={1,2}; T y=x; y.a; }) => 1
({ union { int a; char b[4]; } x={0x01020304}; x.b[0]; }) => 4
({ union { int a; char b[4]; } x={0x01020304}; x.b[1]; }) => 3
({ union { struct { char a,b,c,d; } e; int f; } x={{4,3,2,1}}; x.f; }) => 16909060
g3 => 3
g4 => 4
g5 => 5
g6 => 6
g9[0] => 0
g9[1] => 1
g9[2] => 2
g11[0].a => 1
g11[0].b => 2
g11[1].a => 3
g11[1].b => 4
g12[0].a[0] => 1
g12[0].a[1] => 2
g12[1].a[0] => 0
g12[1].a[1] => 0
g13[0].b[0] => 4
g13[0].b[1] => 3
g13[1].b[0] => 8
g13[1].b[1] => 7
sizeof(g17) => 7
sizeof(g18) => 10
sizeof(g19) => 3
memcmp(g17, "foobar", 7) => 0
memcmp(g18, "foobar\0\0\0", 10) => 0
memcmp(g19, "foo", 3) => 0
strcmp(g20, "foobar") => 0
strcmp(g21, "bar") => 0
strcmp(g22+3, "foobar") => 0
strcmp(g23[0], "foobar") => 0
strcmp(g23[1], "bar") => 0
strcmp(g23[2]+3, "foobar") => 0
g24 => 3
*g25 => 3
*g27 => 2
*g28 => 3
*(int *)g29 => 1
g31[0] => 1
g31[1] => 2
g31[2] => 3
g40[0].a[0] => 1
g40[0].a[1] => 2
g40[1].a[0] => 3
g40[1].a[1] => 4
g41[0].a[0] => 1
g41[0].a[1] => 2
g41[1].a[0] => 3
g41[1].a[1] => 4
({ int x[2][3]={0,1,2,3,4,5}; x[0][0]; }) => 0
({ int x[2][3]={0,1,2,3,4,5}; x[1][0]; }) => 3
({ struct {int a; int b;} x[2]={0,1,2,3}; x[0].a; }) => 0
({ struct {int a; int b;} x[2]={0,1,2,3}; x[1].a; }) => 2
strcmp(g43[0], "foo") => 0
strcmp(g43[1], "bar") => 0
strcmp(g44, "foo") => 0
({ int a[]={1,2,3,}; a[2]; }) => 3
({ struct {int a,b,c;} x={1,2,3,}; x.a; }) => 1
({ union {int a; char b;} x={1,}; x.a; }) => 1
({ enum {x,y,z,}; z; }) => 2
sizeof(g60) => 3
sizeof(g61) => 6
sizeof(g65) => 4
sizeof(g66) => 7
strcmp(g65.b, "oo") => 0
strcmp(g66.b, "oobar") => 0
OK

stage2/test/literal.exe
'a' => 97
'\n' => 10
'\x80' => -128
0777 => 511
0x0 => 0
0xa => 10
0XA => 10
0xbeef => 48879
0xBEEF => 48879
0XBEEF => 48879
0b0 => 0
0b1 => 1
0b101111 => 47
0B101111 => 47
sizeof(0) => 4
sizeof(0L) => 8
sizeof(0LU) => 8
sizeof(0UL) => 8
sizeof(0LL) => 8
sizeof(0LLU) => 8
sizeof(0Ull) => 8
sizeof(0l) => 8
sizeof(0ll) => 8
sizeof(0x0L) => 8
sizeof(0b0L) => 8
sizeof(2147483647) => 4
sizeof(2147483648) => 8
0xffffffffffffffff => -1
sizeof(0xffffffffffffffff) => 8
sizeof(4294967295U) => 4
sizeof(4294967296U) => 8
-1U>>30 => 3
-1Ul>>62 => 3
-1ull>>62 => 3
0xffffffffffffffffl>>63 => 1
0xffffffffffffffffll>>63 => 1
18446744073709551615 => -1
sizeof(18446744073709551615) => 8
18446744073709551615>>63 => -1
0xffffffffffffffff => -1
sizeof(0xffffffffffffffff) => 8
0xffffffffffffffff>>63 => 1
01777777777777777777777 => -1
sizeof(01777777777777777777777) => 8
01777777777777777777777>>63 => 1
0b1111111111111111111111111111111111111111111111111111111111111111 => -1
sizeof(0b1111111111111111111111111111111111111111111111111111111111111111) => 8
0b1111111111111111111111111111111111111111111111111111111111111111>>63 => 1
sizeof(2147483648) => 8
sizeof(2147483647) => 4
sizeof(0x1ffffffff) => 8
sizeof(0xffffffff) => 4
0xffffffff>>31 => 1
sizeof(040000000000) => 8
sizeof(037777777777) => 4
037777777777>>31 => 1
sizeof(0b111111111111111111111111111111111) => 8
sizeof(0b11111111111111111111111111111111) => 4
0b11111111111111111111111111111111>>31 => 1
1 << 31 >> 31 => -1
01 << 31 >> 31 => -1
0x1 << 31 >> 31 => -1
0b1 << 31 >> 31 => -1
sizeof(8f) => 4
sizeof(0.3F) => 4
sizeof(0.) => 8
sizeof(.0) => 8
sizeof(5.l) => 8
sizeof(2.0L) => 8
sizeof(char) => 1
sizeof(L'\0') => 4
L'a' => 97
OK

stage2/test/macro.exe
include1 => 5
include2 => 7
m => 5
m => 3
m => 3
m => 2
m => 2
m => 3
m => 1
m => 2
M1 => 3
M1 => 4
M1 5 => 12
M1*5 => 23
5 => 5
m => 5
m => 5
M2 => 9
M3 => 12
M4 => 13
m => 3
m => 5
m => 3
m => 5
M7() => 1
M7 => 5
ret3 () => 3
M8(3, 4) => 7
M8(3+4, 4+5) => 24
M8(3+4, 4+5) => 63
M8(, 4+5) => 9
M8((2+3), 4) => 20
M8((2,3), 4) => 12
dbl(2) => 10
M11( a!b `""c)[0] => 97
M11( a!b `""c)[1] => 33
M11( a!b `""c)[2] => 98
M11( a!b `""c)[3] => 32
M11( a!b `""c)[4] => 96
M11( a!b `""c)[5] => 34
M11( a!b `""c)[6] => 34
M11( a!b `""c)[7] => 99
M11( a!b `""c)[8] => 0
paste(1,5) => 15
paste(0,xff) => 255
({ int foobar=3; foobar; }) => 3
paste(5,) => 5
paste(,5) => 5
({ int i3=100; 1+i3; }) => 101
paste2(1+2) => 26
paste3(1+2) => 23
paste4(1,2,3) => 123
m => 3
m => 3
m => 4
m => 4
m => 5
strcmp("foo.bar", "foo.bar") => 0
strcmp("foo. bar", "foo. bar") => 0
strcmp("bar.foo", "bar.foo") => 0
strcmp("bar. foo", "bar. foo") => 0
foo => 3
foo => 4
foo => 3
foo => 4
__STDC__ => 1
strcmp(main_filename1, "test/macro.c") => 0
main_line1 => 5
main_line2 => 7
strcmp(include1_filename, "test/include1.h") => 0
include1_line => 4
M14() => 3
M14() 2 => 2
M14(5) => 5
M14(2, 6) => 8
M14(3,4,5) => 21
M14(3,4,5) => 21
M14(5) => 5
OK

stage2/test/pointer.exe
({ int x=3; *&x; }) => 3
({ int x=3; int *y=&x; int **z=&y; **z; }) => 3
({ int x=3; int y=5; *(&x+1); }) => 5
({ int x=3; int y=5; *(&y-1); }) => 3
({ int x=3; int y=5; *(&x-(-1)); }) => 5
({ int x=3; int *y=&x; *y=5; x; }) => 5
({ int x=3; int y=5; *(&x+1)=7; y; }) => 7
({ int x=3; int y=5; *(&y-2+1)=7; x; }) => 7
({ int x=3; (&x+2)-&x+3; }) => 5
({ int x, y; x=3; y=5; x+y; }) => 8
({ int x=3, y=5; x+y; }) => 8
({ int x[2]; int *y=&x; *y=3; *x; }) => 3
({ int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *x; }) => 3
({ int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+1); }) => 4
({ int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+2); }) => 5
({ int x[2][3]; int *y=x; *y=0; **x; }) => 0
({ int x[2][3]; int *y=x; *(y+1)=1; *(*x+1); }) => 1
({ int x[2][3]; int *y=x; *(y+2)=2; *(*x+2); }) => 2
({ int x[2][3]; int *y=x; *(y+3)=3; **(x+1); }) => 3
({ int x[2][3]; int *y=x; *(y+4)=4; *(*(x+1)+1); }) => 4
({ int x[2][3]; int *y=x; *(y+5)=5; *(*(x+1)+2); }) => 5
({ int x[3]; *x=3; x[1]=4; x[2]=5; *x; }) => 3
({ int x[3]; *x=3; x[1]=4; x[2]=5; *(x+1); }) => 4
({ int x[3]; *x=3; x[1]=4; x[2]=5; *(x+2); }) => 5
({ int x[3]; *x=3; x[1]=4; x[2]=5; *(x+2); }) => 5
({ int x[3]; *x=3; x[1]=4; 2[x]=5; *(x+2); }) => 5
({ int x[2][3]; int *y=x; y[0]=0; x[0][0]; }) => 0
({ int x[2][3]; int *y=x; y[1]=1; x[0][1]; }) => 1
({ int x[2][3]; int *y=x; y[2]=2; x[0][2]; }) => 2
({ int x[2][3]; int *y=x; y[3]=3; x[1][0]; }) => 3
({ int x[2][3]; int *y=x; y[4]=4; x[1][1]; }) => 4
({ int x[2][3]; int *y=x; y[5]=5; x[1][2]; }) => 5
OK

stage2/test/sizeof.exe
sizeof(char) => 1
sizeof(short) => 2
sizeof(short int) => 2
sizeof(int short) => 2
sizeof(int) => 4
sizeof(long) => 8
sizeof(long int) => 8
sizeof(long int) => 8
sizeof(char *) => 8
sizeof(int *) => 8
sizeof(long *) => 8
sizeof(int **) => 8
sizeof(int(*)[4]) => 8
sizeof(int*[4]) => 32
sizeof(int[4]) => 16
sizeof(int[3][4]) => 48
sizeof(struct {int a; int b;}) => 8
sizeof(-10 + (long)5) => 8
sizeof(-10 - (long)5) => 8
sizeof(-10 * (long)5) => 8
sizeof(-10 / (long)5) => 8
sizeof((long)-10 + 5) => 8
sizeof((long)-10 - 5) => 8
sizeof((long)-10 * 5) => 8
sizeof((long)-10 / 5) => 8
({ char i; sizeof(++i); }) => 1
sizeof(int(*)[10]) => 8
sizeof(int(*)[][10]) => 8
sizeof(struct { int x, y[]; }) => 4
sizeof(char) => 1
sizeof(signed char) => 1
sizeof(signed char signed) => 1
sizeof(unsigned char) => 1
sizeof(unsigned char unsigned) => 1
sizeof(short) => 2
sizeof(int short) => 2
sizeof(short int) => 2
sizeof(signed short) => 2
sizeof(int short signed) => 2
sizeof(unsigned short) => 2
sizeof(int short unsigned) => 2
sizeof(int) => 4
sizeof(signed int) => 4
sizeof(signed) => 4
sizeof(signed signed) => 4
sizeof(unsigned int) => 4
sizeof(unsigned) => 4
sizeof(unsigned unsigned) => 4
sizeof(long) => 8
sizeof(signed long) => 8
sizeof(signed long int) => 8
sizeof(unsigned long) => 8
sizeof(unsigned long int) => 8
sizeof(long long) => 8
sizeof(signed long long) => 8
sizeof(signed long long int) => 8
sizeof(unsigned long long) => 8
sizeof(unsigned long long int) => 8
sizeof((char)1) => 1
sizeof((short)1) => 2
sizeof((int)1) => 4
sizeof((long)1) => 8
sizeof((char)1 + (char)1) => 4
sizeof((short)1 + (short)1) => 4
sizeof(1?2:3) => 4
sizeof(1?(short)2:(char)3) => 4
sizeof(1?(long)2:(char)3) => 8
sizeof(char) << 31 >> 31 => 1
sizeof(char) << 63 >> 63 => 1
sizeof(float) => 4
sizeof(double) => 8
sizeof(1f+2) => 4
sizeof(1.0+2) => 8
sizeof(1f-2) => 4
sizeof(1.0-2) => 8
sizeof(1f*2) => 4
sizeof(1.0*2) => 8
sizeof(1f/2) => 4
sizeof(1.0/2) => 8
sizeof(long double) => 8
OK

stage2/test/stdhdr.exe
OK

stage2/test/string.exe
""[0] => 0
sizeof("") => 1
"abc"[0] => 97
"abc"[1] => 98
"abc"[2] => 99
"abc"[3] => 0
sizeof("abc") => 4
"\a"[0] => 7
"\b"[0] => 8
"\t"[0] => 9
"\n"[0] => 10
"\v"[0] => 11
"\f"[0] => 12
"\r"[0] => 13
"\e"[0] => 27
"\j"[0] => 106
"\k"[0] => 107
"\l"[0] => 108
"\ax\ny"[0] => 7
"\ax\ny"[1] => 120
"\ax\ny"[2] => 10
"\ax\ny"[3] => 121
"\0"[0] => 0
"\20"[0] => 16
"\101"[0] => 65
"\1500"[0] => 104
"\x00"[0] => 0
"\x77"[0] => 119
sizeof("abc" "def") => 7
sizeof("abc" "d" "efgh") => 9
strcmp("abc" "d" "\nefgh", "abcd\nefgh") => 0
!strcmp("abc" "d", "abcd\nefgh") => 0
strcmp("\x9" "0", "\t0") => 0
OK

stage2/test/struct.exe
({ struct {int a; int b;} x; x.a=1; x.b=2; x.a; }) => 1
({ struct {int a; int b;} x; x.a=1; x.b=2; x.b; }) => 2
({ struct {char a; int b; char c;} x; x.a=1; x.b=2; x.c=3; x.a; }) => 1
({ struct {char a; int b; char c;} x; x.b=1; x.b=2; x.c=3; x.b; }) => 2
({ struct {char a; int b; char c;} x; x.a=1; x.b=2; x.c=3; x.c; }) => 3
({ struct {char a; char b;} x[3]; char *p=x; p[0]=0; x[0].a; }) => 0
({ struct {char a; char b;} x[3]; char *p=x; p[1]=1; x[0].b; }) => 1
({ struct {char a; char b;} x[3]; char *p=x; p[2]=2; x[1].a; }) => 2
({ struct {char a; char b;} x[3]; char *p=x; p[3]=3; x[1].b; }) => 3
({ struct {char a[3]; char b[5];} x; char *p=&x; x.a[0]=6; p[0]; }) => 6
({ struct {char a[3]; char b[5];} x; char *p=&x; x.b[0]=7; p[3]; }) => 7
({ struct { struct { char b; } a; } x; x.a.b=6; x.a.b; }) => 6
({ struct {int a;} x; sizeof(x); }) => 4
({ struct {int a; int b;} x; sizeof(x); }) => 8
({ struct {int a, b;} x; sizeof(x); }) => 8
({ struct {int a[3];} x; sizeof(x); }) => 12
({ struct {int a;} x[4]; sizeof(x); }) => 16
({ struct {int a[3];} x[2]; sizeof(x); }) => 24
({ struct {char a; char b;} x; sizeof(x); }) => 2
({ struct {} x; sizeof(x); }) => 0
({ struct {char a; int b;} x; sizeof(x); }) => 8
({ struct {int a; char b;} x; sizeof(x); }) => 8
({ struct t {int a; int b;} x; struct t y; sizeof(y); }) => 8
({ struct t {int a; int b;}; struct t y; sizeof(y); }) => 8
({ struct t {char a[2];}; { struct t {char a[4];}; } struct t y; sizeof(y); }) => 2
({ struct t {int x;}; int t=1; struct t y; y.x=2; t+y.x; }) => 3
({ struct t {char a;} x; struct t *y = &x; x.a=3; y->a; }) => 3
({ struct t {char a;} x; struct t *y = &x; y->a=3; x.a; }) => 3
({ struct {int a,b;} x,y; x.a=3; y=x; y.a; }) => 3
({ struct t {int a,b;}; struct t x; x.a=7; struct t y; struct t *z=&y; *z=x; y.a; }) => 7
({ struct t {int a,b;}; struct t x; x.a=7; struct t y, *p=&x, *q=&y; *q=*p; y.a; }) => 7
({ struct t {char a, b;} x, y; x.a=5; y=x; y.a; }) => 5
({ struct t {int a; int b;} x; struct t y; sizeof(y); }) => 8
({ struct t {int a; int b;}; struct t y; sizeof(y); }) => 8
({ struct {char a; long b;} x; sizeof(x); }) => 16
({ struct {char a; short b;} x; sizeof(x); }) => 4
({ struct foo *bar; sizeof(bar); }) => 8
({ struct T *foo; struct T {int x;}; sizeof(struct T); }) => 4
({ struct T { struct T *next; int x; } a; struct T b; b.x=1; a.next=&b; a.next->x; }) => 1
({ typedef struct T T; struct T { int x; }; sizeof(T); }) => 4
OK

stage2/test/typedef.exe
({ typedef int t; t x=1; x; }) => 1
({ typedef struct {int a;} t; t x; x.a=1; x.a; }) => 1
({ typedef int t; t t=1; t; }) => 1
({ typedef struct {int a;} t; { typedef int t; } t x; x.a=2; x.a; }) => 2
({ typedef t; t x; sizeof(x); }) => 4
({ MyInt x=3; x; }) => 3
({ MyInt2 x; sizeof(x); }) => 16
OK

stage2/test/union.exe
({ union { int a; char b[6]; } x; sizeof(x); }) => 8
({ union { int a; char b[4]; } x; x.a = 515; x.b[0]; }) => 3
({ union { int a; char b[4]; } x; x.a = 515; x.b[1]; }) => 2
({ union { int a; char b[4]; } x; x.a = 515; x.b[2]; }) => 0
({ union { int a; char b[4]; } x; x.a = 515; x.b[3]; }) => 0
({ union {int a,b;} x,y; x.a=3; y.a=5; y=x; y.a; }) => 3
({ union {struct {int a,b;} c;} x,y; x.c.b=3; y.c.b=5; y=x; y.c.b; }) => 3
OK

stage2/test/usualconv.exe
-10 + (long)5 => -5
-10 - (long)5 => -15
-10 * (long)5 => -50
-10 / (long)5 => -2
-2 < (long)-1 => 1
-2 <= (long)-1 => 1
-2 > (long)-1 => 0
-2 >= (long)-1 => 0
(long)-2 < -1 => 1
(long)-2 <= -1 => 1
(long)-2 > -1 => 0
(long)-2 >= -1 => 0
2147483647 + 2147483647 + 2 => 0
({ long x; x=-1; x; }) => -1
({ char x[3]; x[0]=0; x[1]=1; x[2]=2; char *y=x+1; y[0]; }) => 1
({ char x[3]; x[0]=0; x[1]=1; x[2]=2; char *y=x+1; y[-1]; }) => 0
({ struct t {char a;} x, y; x.a=5; y=x; y.a; }) => 5
(1 ? ret10 : (void *)0)() => 10
OK

stage2/test/varargs.exe
sum1(1, 2, 3, 0) => 6
sum2(1,2.0, 3,4.0, 5,6.0, 0) => 21
OK

stage2/test/variable.exe
({ int a; a=3; a; }) => 3
({ int a=3; a; }) => 3
({ int a=3; int z=5; a+z; }) => 8
({ int a=3; a; }) => 3
({ int a=3; int z=5; a+z; }) => 8
({ int a; int b; a=b=3; a+b; }) => 6
({ int foo=3; foo; }) => 3
({ int foo123=3; int bar=5; foo123+bar; }) => 8
({ int x; sizeof(x); }) => 4
({ int x; sizeof x; }) => 4
({ int *x; sizeof(x); }) => 8
({ int x[4]; sizeof(x); }) => 16
({ int x[3][4]; sizeof(x); }) => 48
({ int x[3][4]; sizeof(*x); }) => 16
({ int x[3][4]; sizeof(**x); }) => 4
({ int x[3][4]; sizeof(**x) + 1; }) => 5
({ int x[3][4]; sizeof **x + 1; }) => 5
({ int x[3][4]; sizeof(**x + 1); }) => 4
({ int x=1; sizeof(x=2); }) => 4
({ int x=1; sizeof(x=2); x; }) => 1
g1 => 0
({ g1=3; g1; }) => 3
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[0]; }) => 0
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[1]; }) => 1
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[2]; }) => 2
({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[3]; }) => 3
sizeof(g1) => 4
sizeof(g2) => 16
({ char x=1; x; }) => 1
({ char x=1; char y=2; x; }) => 1
({ char x=1; char y=2; y; }) => 2
({ char x; sizeof(x); }) => 1
({ char x[10]; sizeof(x); }) => 10
({ int x=2; { int x=3; } x; }) => 2
({ int x=2; { int x=3; } int y=4; x; }) => 2
({ int x=2; { x=3; } x; }) => 3
({ int x; int y; char z; char *a=&y; char *b=&z; b-a; }) => 7
({ int x; char y; int z; char *a=&y; char *b=&z; b-a; }) => 1
({ long x; sizeof(x); }) => 8
({ short x; sizeof(x); }) => 2
({ char *x[3]; sizeof(x); }) => 24
({ char (*x)[3]; sizeof(x); }) => 8
({ char (x); sizeof(x); }) => 1
({ char (x)[3]; sizeof(x); }) => 3
({ char (x[3])[4]; sizeof(x); }) => 12
({ char (x[3])[4]; sizeof(x[0]); }) => 4
({ char *x[3]; char y; x[0]=&y; y=3; x[0][0]; }) => 3
({ char x[3]; char (*y)[3]=x; y[0][0]=4; y[0][0]; }) => 4
g3 => 3
OK

test/driver.sh ./stage2/chibicc
testing -o ... passed
testing --help ... passed
testing -march=x64 ... passed
testing -march=riscv ... passed
testing -S ... passed
testing default output file ... passed
testing default output file ... passed
testing multiple input files ... passed
testing multiple input files ... passed
testing linker ... passed
testing linker ... passed
testing a.out ... passed
testing -E ... passed
testing -E and -o ... passed
testing -I ... passed
OK
make[1]: Leaving directory '/home/corco/github.com/daily/cike/chibicc/c197'
